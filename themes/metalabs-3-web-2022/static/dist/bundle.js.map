{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/gsap/dist/ScrollTrigger.js","node_modules/gsap/dist/SplitText.js","static/js/components/3dSlider.js","static/js/components/3dSliderModels.js","static/js/components/ContactModel.js","static/js/components/Cursor.js","static/js/components/FlickeringText.js","static/js/components/HeaderModel.js","static/js/components/Loader.js","static/js/components/Marquee.js","static/js/components/NavigationController.js","static/js/helpers/GridHelper.js","static/js/index.js"],"names":[],"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  /*!\n   * Observer 3.10.4\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2022, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n  var gsap,\n      _coreInitted,\n      _clamp,\n      _win,\n      _doc,\n      _docEl,\n      _body,\n      _isTouch,\n      _pointerType,\n      ScrollTrigger,\n      _root,\n      _normalizer,\n      _eventTypes,\n      _getGSAP = function _getGSAP() {\n    return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n  },\n      _startup = 1,\n      _observers = [],\n      _scrollers = [],\n      _proxies = [],\n      _getTime = Date.now,\n      _bridge = function _bridge(name, value) {\n    return value;\n  },\n      _integrate = function _integrate() {\n    var core = ScrollTrigger.core,\n        data = core.bridge || {},\n        scrollers = core._scrollers,\n        proxies = core._proxies;\n    scrollers.push.apply(scrollers, _scrollers);\n    proxies.push.apply(proxies, _proxies);\n    _scrollers = scrollers;\n    _proxies = proxies;\n\n    _bridge = function _bridge(name, value) {\n      return data[name](value);\n    };\n  },\n      _getProxyProp = function _getProxyProp(element, property) {\n    return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];\n  },\n      _isViewport = function _isViewport(el) {\n    return !!~_root.indexOf(el);\n  },\n      _addListener = function _addListener(element, type, func, nonPassive, capture) {\n    return element.addEventListener(type, func, {\n      passive: !nonPassive,\n      capture: !!capture\n    });\n  },\n      _removeListener = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n  },\n      _scrollLeft = \"scrollLeft\",\n      _scrollTop = \"scrollTop\",\n      _onScroll = function _onScroll() {\n    return _normalizer && _normalizer.isPressed || _scrollers.cache++;\n  },\n      _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {\n    var cachingFunc = function cachingFunc(value) {\n      if (value || value === 0) {\n        _startup && (_win.history.scrollRestoration = \"manual\");\n        var isNormalizing = _normalizer && _normalizer.isPressed;\n        value = cachingFunc.v = Math.round(value) || (_normalizer && _normalizer.iOS ? 1 : 0);\n        f(value);\n        cachingFunc.cacheID = _scrollers.cache;\n        isNormalizing && _bridge(\"ss\", value);\n      } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge(\"ref\")) {\n        cachingFunc.cacheID = _scrollers.cache;\n        cachingFunc.v = f();\n      }\n\n      return cachingFunc.v + cachingFunc.offset;\n    };\n\n    cachingFunc.offset = 0;\n    return f && cachingFunc;\n  },\n      _horizontal = {\n    s: _scrollLeft,\n    p: \"left\",\n    p2: \"Left\",\n    os: \"right\",\n    os2: \"Right\",\n    d: \"width\",\n    d2: \"Width\",\n    a: \"x\",\n    sc: _scrollCacheFunc(function (value) {\n      return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0;\n    })\n  },\n      _vertical = {\n    s: _scrollTop,\n    p: \"top\",\n    p2: \"Top\",\n    os: \"bottom\",\n    os2: \"Bottom\",\n    d: \"height\",\n    d2: \"Height\",\n    a: \"y\",\n    op: _horizontal,\n    sc: _scrollCacheFunc(function (value) {\n      return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0;\n    })\n  },\n      _getTarget = function _getTarget(t) {\n    return gsap.utils.toArray(t)[0] || (typeof t === \"string\" && gsap.config().nullTargetWarn !== false ? console.warn(\"Element not found:\", t) : null);\n  },\n      _getScrollFunc = function _getScrollFunc(element, _ref) {\n    var s = _ref.s,\n        sc = _ref.sc;\n\n    var i = _scrollers.indexOf(element),\n        offset = sc === _vertical.sc ? 1 : 2;\n\n    !~i && (i = _scrollers.push(element) - 1);\n    return _scrollers[i + offset] || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport(element) ? sc : _scrollCacheFunc(function (value) {\n      return arguments.length ? element[s] = value : element[s];\n    })));\n  },\n      _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {\n    var v1 = value,\n        v2 = value,\n        t1 = _getTime(),\n        t2 = t1,\n        min = minTimeRefresh || 50,\n        dropToZeroTime = Math.max(500, min * 3),\n        update = function update(value, force) {\n      var t = _getTime();\n\n      if (force || t - t1 > min) {\n        v2 = v1;\n        v1 = value;\n        t2 = t1;\n        t1 = t;\n      } else if (useDelta) {\n        v1 += value;\n      } else {\n        v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);\n      }\n    },\n        reset = function reset() {\n      v2 = v1 = useDelta ? 0 : v1;\n      t2 = t1 = 0;\n    },\n        getVelocity = function getVelocity(latestValue) {\n      var tOld = t2,\n          vOld = v2,\n          t = _getTime();\n\n      (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);\n      return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;\n    };\n\n    return {\n      update: update,\n      reset: reset,\n      getVelocity: getVelocity\n    };\n  },\n      _getEvent = function _getEvent(e, preventDefault) {\n    preventDefault && !e._gsapAllow && e.preventDefault();\n    return e.changedTouches ? e.changedTouches[0] : e;\n  },\n      _getAbsoluteMax = function _getAbsoluteMax(a) {\n    var max = Math.max.apply(Math, a),\n        min = Math.min.apply(Math, a);\n    return Math.abs(max) >= Math.abs(min) ? max : min;\n  },\n      _setScrollTrigger = function _setScrollTrigger() {\n    ScrollTrigger = gsap.core.globals().ScrollTrigger;\n    ScrollTrigger && ScrollTrigger.core && _integrate();\n  },\n      _initCore = function _initCore(core) {\n    gsap = core || _getGSAP();\n\n    if (gsap && typeof document !== \"undefined\" && document.body) {\n      _win = window;\n      _doc = document;\n      _docEl = _doc.documentElement;\n      _body = _doc.body;\n      _root = [_win, _doc, _docEl, _body];\n      _clamp = gsap.utils.clamp;\n      _pointerType = \"onpointerenter\" in _body ? \"pointer\" : \"mouse\";\n      _isTouch = Observer.isTouch = _win.matchMedia && _win.matchMedia(\"(hover: none), (pointer: coarse)\").matches ? 1 : \"ontouchstart\" in _win || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;\n      _eventTypes = Observer.eventTypes = (\"ontouchstart\" in _docEl ? \"touchstart,touchmove,touchcancel,touchend\" : !(\"onpointerdown\" in _docEl) ? \"mousedown,mousemove,mouseup,mouseup\" : \"pointerdown,pointermove,pointercancel,pointerup\").split(\",\");\n      setTimeout(function () {\n        return _startup = 0;\n      }, 500);\n\n      _setScrollTrigger();\n\n      _coreInitted = 1;\n    }\n\n    return _coreInitted;\n  };\n\n  _horizontal.op = _vertical;\n  _scrollers.cache = 0;\n  var Observer = function () {\n    function Observer(vars) {\n      this.init(vars);\n    }\n\n    var _proto = Observer.prototype;\n\n    _proto.init = function init(vars) {\n      _coreInitted || _initCore(gsap) || console.warn(\"Please gsap.registerPlugin(Observer)\");\n      ScrollTrigger || _setScrollTrigger();\n      var tolerance = vars.tolerance,\n          dragMinimum = vars.dragMinimum,\n          type = vars.type,\n          target = vars.target,\n          lineHeight = vars.lineHeight,\n          debounce = vars.debounce,\n          preventDefault = vars.preventDefault,\n          onStop = vars.onStop,\n          onStopDelay = vars.onStopDelay,\n          ignore = vars.ignore,\n          wheelSpeed = vars.wheelSpeed,\n          event = vars.event,\n          onDragStart = vars.onDragStart,\n          onDragEnd = vars.onDragEnd,\n          onDrag = vars.onDrag,\n          onPress = vars.onPress,\n          onRelease = vars.onRelease,\n          onRight = vars.onRight,\n          onLeft = vars.onLeft,\n          onUp = vars.onUp,\n          onDown = vars.onDown,\n          onChangeX = vars.onChangeX,\n          onChangeY = vars.onChangeY,\n          onChange = vars.onChange,\n          onToggleX = vars.onToggleX,\n          onToggleY = vars.onToggleY,\n          onHover = vars.onHover,\n          onHoverEnd = vars.onHoverEnd,\n          onMove = vars.onMove,\n          ignoreCheck = vars.ignoreCheck,\n          isNormalizer = vars.isNormalizer,\n          onGestureStart = vars.onGestureStart,\n          onGestureEnd = vars.onGestureEnd,\n          onWheel = vars.onWheel,\n          onEnable = vars.onEnable,\n          onDisable = vars.onDisable,\n          onClick = vars.onClick,\n          scrollSpeed = vars.scrollSpeed,\n          capture = vars.capture,\n          allowClicks = vars.allowClicks,\n          lockAxis = vars.lockAxis,\n          onLockAxis = vars.onLockAxis;\n      this.target = target = _getTarget(target) || _docEl;\n      this.vars = vars;\n      ignore && (ignore = gsap.utils.toArray(ignore));\n      tolerance = tolerance || 0;\n      dragMinimum = dragMinimum || 0;\n      wheelSpeed = wheelSpeed || 1;\n      scrollSpeed = scrollSpeed || 1;\n      type = type || \"wheel,touch,pointer\";\n      debounce = debounce !== false;\n      lineHeight || (lineHeight = parseFloat(_win.getComputedStyle(_body).lineHeight) || 22);\n\n      var id,\n          onStopDelayedCall,\n          dragged,\n          moved,\n          wheeled,\n          locked,\n          axis,\n          self = this,\n          prevDeltaX = 0,\n          prevDeltaY = 0,\n          scrollFuncX = _getScrollFunc(target, _horizontal),\n          scrollFuncY = _getScrollFunc(target, _vertical),\n          scrollX = scrollFuncX(),\n          scrollY = scrollFuncY(),\n          limitToTouch = ~type.indexOf(\"touch\") && !~type.indexOf(\"pointer\") && _eventTypes[0] === \"pointerdown\",\n          isViewport = _isViewport(target),\n          ownerDoc = target.ownerDocument || _doc,\n          deltaX = [0, 0, 0],\n          deltaY = [0, 0, 0],\n          onClickTime = 0,\n          clickCapture = function clickCapture() {\n        return onClickTime = _getTime();\n      },\n          _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {\n        return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== \"touch\" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);\n      },\n          onStopFunc = function onStopFunc() {\n        self._vx.reset();\n\n        self._vy.reset();\n\n        onStopDelayedCall.pause();\n        onStop && onStop(self);\n      },\n          update = function update() {\n        var dx = self.deltaX = _getAbsoluteMax(deltaX),\n            dy = self.deltaY = _getAbsoluteMax(deltaY),\n            changedX = Math.abs(dx) >= tolerance,\n            changedY = Math.abs(dy) >= tolerance;\n\n        onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY);\n\n        if (changedX) {\n          onRight && self.deltaX > 0 && onRight(self);\n          onLeft && self.deltaX < 0 && onLeft(self);\n          onChangeX && onChangeX(self);\n          onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);\n          prevDeltaX = self.deltaX;\n          deltaX[0] = deltaX[1] = deltaX[2] = 0;\n        }\n\n        if (changedY) {\n          onDown && self.deltaY > 0 && onDown(self);\n          onUp && self.deltaY < 0 && onUp(self);\n          onChangeY && onChangeY(self);\n          onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);\n          prevDeltaY = self.deltaY;\n          deltaY[0] = deltaY[1] = deltaY[2] = 0;\n        }\n\n        if (moved || dragged) {\n          onMove && onMove(self);\n          onLockAxis && locked && onLockAxis(self);\n\n          if (dragged) {\n            onDrag(self);\n            dragged = false;\n          }\n\n          moved = locked = false;\n        }\n\n        if (wheeled) {\n          onWheel(self);\n          wheeled = false;\n        }\n\n        id = 0;\n      },\n          onDelta = function onDelta(x, y, index) {\n        deltaX[index] += x;\n        deltaY[index] += y;\n\n        self._vx.update(x);\n\n        self._vy.update(y);\n\n        debounce ? id || (id = requestAnimationFrame(update)) : update();\n      },\n          onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {\n        if (axis !== \"y\") {\n          deltaX[2] += x;\n\n          self._vx.update(x, true);\n        }\n\n        if (axis !== \"x\") {\n          deltaY[2] += y;\n\n          self._vy.update(y, true);\n        }\n\n        if (lockAxis && !axis) {\n          self.axis = axis = Math.abs(x) > Math.abs(y) ? \"x\" : \"y\";\n          locked = true;\n        }\n\n        debounce ? id || (id = requestAnimationFrame(update)) : update();\n      },\n          _onDrag = function _onDrag(e) {\n        if (_ignoreCheck(e, 1)) {\n          return;\n        }\n\n        e = _getEvent(e, preventDefault);\n        var x = e.clientX,\n            y = e.clientY,\n            dx = x - self.x,\n            dy = y - self.y,\n            isDragging = self.isDragging;\n        self.x = x;\n        self.y = y;\n\n        if (isDragging || Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum) {\n          onDrag && (dragged = true);\n          isDragging || (self.isDragging = true);\n          onTouchOrPointerDelta(dx, dy);\n          isDragging || onDragStart && onDragStart(self);\n        }\n      },\n          _onPress = self.onPress = function (e) {\n        if (_ignoreCheck(e, 1)) {\n          return;\n        }\n\n        self.axis = axis = null;\n        onStopDelayedCall.pause();\n        self.isPressed = true;\n        e = _getEvent(e);\n        prevDeltaX = prevDeltaY = 0;\n        self.startX = self.x = e.clientX;\n        self.startY = self.y = e.clientY;\n\n        self._vx.reset();\n\n        self._vy.reset();\n\n        _addListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, preventDefault, true);\n\n        self.deltaX = self.deltaY = 0;\n        onPress && onPress(self);\n      },\n          _onRelease = function _onRelease(e) {\n        if (_ignoreCheck(e, 1)) {\n          return;\n        }\n\n        _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n\n        var wasDragging = self.isDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),\n            eventData = _getEvent(e);\n\n        if (!wasDragging) {\n          self._vx.reset();\n\n          self._vy.reset();\n\n          if (preventDefault && allowClicks) {\n            gsap.delayedCall(0.08, function () {\n              if (_getTime() - onClickTime > 300 && !e.defaultPrevented) {\n                if (e.target.click) {\n                  e.target.click();\n                } else if (ownerDoc.createEvent) {\n                  var syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                  syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);\n                  e.target.dispatchEvent(syntheticEvent);\n                }\n              }\n            });\n          }\n        }\n\n        self.isDragging = self.isGesturing = self.isPressed = false;\n        onStop && !isNormalizer && onStopDelayedCall.restart(true);\n        onDragEnd && wasDragging && onDragEnd(self);\n        onRelease && onRelease(self, wasDragging);\n      },\n          _onGestureStart = function _onGestureStart(e) {\n        return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);\n      },\n          _onGestureEnd = function _onGestureEnd() {\n        return (self.isGesturing = false) || onGestureEnd(self);\n      },\n          onScroll = function onScroll(e) {\n        if (_ignoreCheck(e)) {\n          return;\n        }\n\n        var x = scrollFuncX(),\n            y = scrollFuncY();\n        onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);\n        scrollX = x;\n        scrollY = y;\n        onStop && onStopDelayedCall.restart(true);\n      },\n          _onWheel = function _onWheel(e) {\n        if (_ignoreCheck(e)) {\n          return;\n        }\n\n        e = _getEvent(e, preventDefault);\n        onWheel && (wheeled = true);\n        var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win.innerHeight : 1) * wheelSpeed;\n        onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);\n        onStop && !isNormalizer && onStopDelayedCall.restart(true);\n      },\n          _onMove = function _onMove(e) {\n        if (_ignoreCheck(e)) {\n          return;\n        }\n\n        var x = e.clientX,\n            y = e.clientY,\n            dx = x - self.x,\n            dy = y - self.y;\n        self.x = x;\n        self.y = y;\n        moved = true;\n        (dx || dy) && onTouchOrPointerDelta(dx, dy);\n      },\n          _onHover = function _onHover(e) {\n        self.event = e;\n        onHover(self);\n      },\n          _onHoverEnd = function _onHoverEnd(e) {\n        self.event = e;\n        onHoverEnd(self);\n      },\n          _onClick = function _onClick(e) {\n        return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);\n      };\n\n      onStopDelayedCall = self._dc = gsap.delayedCall(onStopDelay || 0.25, onStopFunc).pause();\n      self.deltaX = self.deltaY = 0;\n      self._vx = _getVelocityProp(0, 50, true);\n      self._vy = _getVelocityProp(0, 50, true);\n      self.scrollX = scrollFuncX;\n      self.scrollY = scrollFuncY;\n      self.isDragging = self.isGesturing = self.isPressed = false;\n\n      self.enable = function (e) {\n        if (!self.isEnabled) {\n          _addListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n\n          type.indexOf(\"scroll\") >= 0 && _addListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, preventDefault, capture);\n          type.indexOf(\"wheel\") >= 0 && _addListener(target, \"wheel\", _onWheel, preventDefault, capture);\n\n          if (type.indexOf(\"touch\") >= 0 && _isTouch || type.indexOf(\"pointer\") >= 0) {\n            _addListener(target, _eventTypes[0], _onPress, preventDefault, capture);\n\n            _addListener(ownerDoc, _eventTypes[2], _onRelease);\n\n            _addListener(ownerDoc, _eventTypes[3], _onRelease);\n\n            allowClicks && _addListener(target, \"click\", clickCapture, false, true);\n            onClick && _addListener(target, \"click\", _onClick);\n            onGestureStart && _addListener(ownerDoc, \"gesturestart\", _onGestureStart);\n            onGestureEnd && _addListener(ownerDoc, \"gestureend\", _onGestureEnd);\n            onHover && _addListener(target, _pointerType + \"enter\", _onHover);\n            onHoverEnd && _addListener(target, _pointerType + \"leave\", _onHoverEnd);\n            onMove && _addListener(target, _pointerType + \"move\", _onMove);\n          }\n\n          self.isEnabled = true;\n          e && e.type && _onPress(e);\n          onEnable && onEnable(self);\n        }\n\n        return self;\n      };\n\n      self.disable = function () {\n        if (self.isEnabled) {\n          _observers.filter(function (o) {\n            return o !== self && _isViewport(o.target);\n          }).length || _removeListener(isViewport ? ownerDoc : target, \"scroll\", _onScroll);\n\n          if (self.isPressed) {\n            self._vx.reset();\n\n            self._vy.reset();\n\n            _removeListener(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);\n          }\n\n          _removeListener(isViewport ? ownerDoc : target, \"scroll\", onScroll, capture);\n\n          _removeListener(target, \"wheel\", _onWheel, capture);\n\n          _removeListener(target, _eventTypes[0], _onPress, capture);\n\n          _removeListener(ownerDoc, _eventTypes[2], _onRelease);\n\n          _removeListener(ownerDoc, _eventTypes[3], _onRelease);\n\n          _removeListener(target, \"click\", clickCapture, true);\n\n          _removeListener(target, \"click\", _onClick);\n\n          _removeListener(ownerDoc, \"gesturestart\", _onGestureStart);\n\n          _removeListener(ownerDoc, \"gestureend\", _onGestureEnd);\n\n          _removeListener(target, _pointerType + \"enter\", _onHover);\n\n          _removeListener(target, _pointerType + \"leave\", _onHoverEnd);\n\n          _removeListener(target, _pointerType + \"move\", _onMove);\n\n          self.isEnabled = self.isPressed = self.isDragging = false;\n          onDisable && onDisable(self);\n        }\n      };\n\n      self.kill = function () {\n        self.disable();\n\n        var i = _observers.indexOf(self);\n\n        i >= 0 && _observers.splice(i, 1);\n        _normalizer === self && (_normalizer = 0);\n      };\n\n      _observers.push(self);\n\n      isNormalizer && _isViewport(target) && (_normalizer = self);\n      self.enable(event);\n    };\n\n    _createClass(Observer, [{\n      key: \"velocityX\",\n      get: function get() {\n        return this._vx.getVelocity();\n      }\n    }, {\n      key: \"velocityY\",\n      get: function get() {\n        return this._vy.getVelocity();\n      }\n    }]);\n\n    return Observer;\n  }();\n  Observer.version = \"3.10.4\";\n\n  Observer.create = function (vars) {\n    return new Observer(vars);\n  };\n\n  Observer.register = _initCore;\n\n  Observer.getAll = function () {\n    return _observers.slice();\n  };\n\n  Observer.getById = function (id) {\n    return _observers.filter(function (o) {\n      return o.vars.id === id;\n    })[0];\n  };\n\n  _getGSAP() && gsap.registerPlugin(Observer);\n\n  /*!\n   * ScrollTrigger 3.10.4\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2022, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n\n  var gsap$1,\n      _coreInitted$1,\n      _win$1,\n      _doc$1,\n      _docEl$1,\n      _body$1,\n      _root$1,\n      _resizeDelay,\n      _toArray,\n      _clamp$1,\n      _time2,\n      _syncInterval,\n      _refreshing,\n      _pointerIsDown,\n      _transformProp,\n      _i,\n      _prevWidth,\n      _prevHeight,\n      _autoRefresh,\n      _sort,\n      _suppressOverwrites,\n      _ignoreResize,\n      _normalizer$1,\n      _ignoreMobileResize,\n      _baseScreenHeight,\n      _baseScreenWidth,\n      _fixIOSBug,\n      _limitCallbacks,\n      _startup$1 = 1,\n      _getTime$1 = Date.now,\n      _time1 = _getTime$1(),\n      _lastScrollTime = 0,\n      _enabled = 0,\n      _pointerDownHandler = function _pointerDownHandler() {\n    return _pointerIsDown = 1;\n  },\n      _pointerUpHandler = function _pointerUpHandler() {\n    return _pointerIsDown = 0;\n  },\n      _passThrough = function _passThrough(v) {\n    return v;\n  },\n      _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n  },\n      _windowExists = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _getGSAP$1 = function _getGSAP() {\n    return gsap$1 || _windowExists() && (gsap$1 = window.gsap) && gsap$1.registerPlugin && gsap$1;\n  },\n      _isViewport$1 = function _isViewport(e) {\n    return !!~_root$1.indexOf(e);\n  },\n      _getBoundsFunc = function _getBoundsFunc(element) {\n    return _getProxyProp(element, \"getBoundingClientRect\") || (_isViewport$1(element) ? function () {\n      _winOffsets.width = _win$1.innerWidth;\n      _winOffsets.height = _win$1.innerHeight;\n      return _winOffsets;\n    } : function () {\n      return _getBounds(element);\n    });\n  },\n      _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {\n    var d = _ref.d,\n        d2 = _ref.d2,\n        a = _ref.a;\n    return (a = _getProxyProp(scroller, \"getBoundingClientRect\")) ? function () {\n      return a()[d];\n    } : function () {\n      return (isViewport ? _win$1[\"inner\" + d2] : scroller[\"client\" + d2]) || 0;\n    };\n  },\n      _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {\n    return !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : function () {\n      return _winOffsets;\n    };\n  },\n      _maxScroll = function _maxScroll(element, _ref2) {\n    var s = _ref2.s,\n        d2 = _ref2.d2,\n        d = _ref2.d,\n        a = _ref2.a;\n    return (s = \"scroll\" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport$1(element) ? (_docEl$1[s] || _body$1[s]) - (_win$1[\"inner\" + d2] || _docEl$1[\"client\" + d2] || _body$1[\"client\" + d2]) : element[s] - element[\"offset\" + d2];\n  },\n      _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {\n    for (var i = 0; i < _autoRefresh.length; i += 3) {\n      (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);\n    }\n  },\n      _isString = function _isString(value) {\n    return typeof value === \"string\";\n  },\n      _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n  },\n      _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n  },\n      _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n  },\n      _callIfFunc = function _callIfFunc(value) {\n    return _isFunction(value) && value();\n  },\n      _combineFunc = function _combineFunc(f1, f2) {\n    return function () {\n      var result1 = _callIfFunc(f1),\n          result2 = _callIfFunc(f2);\n\n      return function () {\n        _callIfFunc(result1);\n\n        _callIfFunc(result2);\n      };\n    };\n  },\n      _endAnimation = function _endAnimation(animation, reversed, pause) {\n    return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();\n  },\n      _callback = function _callback(self, func) {\n    if (self.enabled) {\n      var result = func(self);\n      result && result.totalTime && (self.callbackAnimation = result);\n    }\n  },\n      _abs = Math.abs,\n      _left = \"left\",\n      _top = \"top\",\n      _right = \"right\",\n      _bottom = \"bottom\",\n      _width = \"width\",\n      _height = \"height\",\n      _Right = \"Right\",\n      _Left = \"Left\",\n      _Top = \"Top\",\n      _Bottom = \"Bottom\",\n      _padding = \"padding\",\n      _margin = \"margin\",\n      _Width = \"Width\",\n      _Height = \"Height\",\n      _px = \"px\",\n      _getComputedStyle = function _getComputedStyle(element) {\n    return _win$1.getComputedStyle(element);\n  },\n      _makePositionable = function _makePositionable(element) {\n    var position = _getComputedStyle(element).position;\n\n    element.style.position = position === \"absolute\" || position === \"fixed\" ? position : \"relative\";\n  },\n      _setDefaults = function _setDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || (obj[p] = defaults[p]);\n    }\n\n    return obj;\n  },\n      _getBounds = function _getBounds(element, withoutTransforms) {\n    var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== \"matrix(1, 0, 0, 1, 0, 0)\" && gsap$1.to(element, {\n      x: 0,\n      y: 0,\n      xPercent: 0,\n      yPercent: 0,\n      rotation: 0,\n      rotationX: 0,\n      rotationY: 0,\n      scale: 1,\n      skewX: 0,\n      skewY: 0\n    }).progress(1),\n        bounds = element.getBoundingClientRect();\n    tween && tween.progress(0).kill();\n    return bounds;\n  },\n      _getSize = function _getSize(element, _ref3) {\n    var d2 = _ref3.d2;\n    return element[\"offset\" + d2] || element[\"client\" + d2] || 0;\n  },\n      _getLabelRatioArray = function _getLabelRatioArray(timeline) {\n    var a = [],\n        labels = timeline.labels,\n        duration = timeline.duration(),\n        p;\n\n    for (p in labels) {\n      a.push(labels[p] / duration);\n    }\n\n    return a;\n  },\n      _getClosestLabel = function _getClosestLabel(animation) {\n    return function (value) {\n      return gsap$1.utils.snap(_getLabelRatioArray(animation), value);\n    };\n  },\n      _snapDirectional = function _snapDirectional(snapIncrementOrArray) {\n    var snap = gsap$1.utils.snap(snapIncrementOrArray),\n        a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {\n      return a - b;\n    });\n    return a ? function (value, direction, threshold) {\n      if (threshold === void 0) {\n        threshold = 1e-3;\n      }\n\n      var i;\n\n      if (!direction) {\n        return snap(value);\n      }\n\n      if (direction > 0) {\n        value -= threshold;\n\n        for (i = 0; i < a.length; i++) {\n          if (a[i] >= value) {\n            return a[i];\n          }\n        }\n\n        return a[i - 1];\n      } else {\n        i = a.length;\n        value += threshold;\n\n        while (i--) {\n          if (a[i] <= value) {\n            return a[i];\n          }\n        }\n      }\n\n      return a[0];\n    } : function (value, direction, threshold) {\n      if (threshold === void 0) {\n        threshold = 1e-3;\n      }\n\n      var snapped = snap(value);\n      return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);\n    };\n  },\n      _getLabelAtDirection = function _getLabelAtDirection(timeline) {\n    return function (value, st) {\n      return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);\n    };\n  },\n      _multiListener = function _multiListener(func, element, types, callback) {\n    return types.split(\",\").forEach(function (type) {\n      return func(element, type, callback);\n    });\n  },\n      _addListener$1 = function _addListener(element, type, func, nonPassive, capture) {\n    return element.addEventListener(type, func, {\n      passive: !nonPassive,\n      capture: !!capture\n    });\n  },\n      _removeListener$1 = function _removeListener(element, type, func, capture) {\n    return element.removeEventListener(type, func, !!capture);\n  },\n      _wheelListener = function _wheelListener(func, el, scrollFunc) {\n    return scrollFunc && scrollFunc.wheelHandler && func(el, \"wheel\", scrollFunc);\n  },\n      _markerDefaults = {\n    startColor: \"green\",\n    endColor: \"red\",\n    indent: 0,\n    fontSize: \"16px\",\n    fontWeight: \"normal\"\n  },\n      _defaults = {\n    toggleActions: \"play\",\n    anticipatePin: 0\n  },\n      _keywords = {\n    top: 0,\n    left: 0,\n    center: 0.5,\n    bottom: 1,\n    right: 1\n  },\n      _offsetToPx = function _offsetToPx(value, size) {\n    if (_isString(value)) {\n      var eqIndex = value.indexOf(\"=\"),\n          relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;\n\n      if (~eqIndex) {\n        value.indexOf(\"%\") > eqIndex && (relative *= size / 100);\n        value = value.substr(0, eqIndex - 1);\n      }\n\n      value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf(\"%\") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);\n    }\n\n    return value;\n  },\n      _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {\n    var startColor = _ref4.startColor,\n        endColor = _ref4.endColor,\n        fontSize = _ref4.fontSize,\n        indent = _ref4.indent,\n        fontWeight = _ref4.fontWeight;\n\n    var e = _doc$1.createElement(\"div\"),\n        useFixedPosition = _isViewport$1(container) || _getProxyProp(container, \"pinType\") === \"fixed\",\n        isScroller = type.indexOf(\"scroller\") !== -1,\n        parent = useFixedPosition ? _body$1 : container,\n        isStart = type.indexOf(\"start\") !== -1,\n        color = isStart ? startColor : endColor,\n        css = \"border-color:\" + color + \";font-size:\" + fontSize + \";color:\" + color + \";font-weight:\" + fontWeight + \";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;\";\n\n    css += \"position:\" + ((isScroller || containerAnimation) && useFixedPosition ? \"fixed;\" : \"absolute;\");\n    (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + \":\" + (offset + parseFloat(indent)) + \"px;\");\n    matchWidthEl && (css += \"box-sizing:border-box;text-align:left;width:\" + matchWidthEl.offsetWidth + \"px;\");\n    e._isStart = isStart;\n    e.setAttribute(\"class\", \"gsap-marker-\" + type + (name ? \" marker-\" + name : \"\"));\n    e.style.cssText = css;\n    e.innerText = name || name === 0 ? type + \"-\" + name : type;\n    parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);\n    e._offset = e[\"offset\" + direction.op.d2];\n\n    _positionMarker(e, 0, direction, isStart);\n\n    return e;\n  },\n      _positionMarker = function _positionMarker(marker, start, direction, flipped) {\n    var vars = {\n      display: \"block\"\n    },\n        side = direction[flipped ? \"os2\" : \"p2\"],\n        oppositeSide = direction[flipped ? \"p2\" : \"os2\"];\n    marker._isFlipped = flipped;\n    vars[direction.a + \"Percent\"] = flipped ? -100 : 0;\n    vars[direction.a] = flipped ? \"1px\" : 0;\n    vars[\"border\" + side + _Width] = 1;\n    vars[\"border\" + oppositeSide + _Width] = 0;\n    vars[direction.p] = start + \"px\";\n    gsap$1.set(marker, vars);\n  },\n      _triggers = [],\n      _ids = {},\n      _rafID,\n      _sync = function _sync() {\n    return _getTime$1() - _lastScrollTime > 34 && _updateAll();\n  },\n      _onScroll$1 = function _onScroll() {\n    if (!_normalizer$1 || !_normalizer$1.isPressed || _normalizer$1.startX > _body$1.clientWidth) {\n      _scrollers.cache++;\n      _rafID || (_rafID = requestAnimationFrame(_updateAll));\n      _lastScrollTime || _dispatch(\"scrollStart\");\n      _lastScrollTime = _getTime$1();\n    }\n  },\n      _setBaseDimensions = function _setBaseDimensions() {\n    _baseScreenWidth = _win$1.innerWidth;\n    _baseScreenHeight = _win$1.innerHeight;\n  },\n      _onResize = function _onResize() {\n    _scrollers.cache++;\n    !_refreshing && !_ignoreResize && !_doc$1.fullscreenElement && !_doc$1.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win$1.innerWidth || Math.abs(_win$1.innerHeight - _baseScreenHeight) > _win$1.innerHeight * 0.25) && _resizeDelay.restart(true);\n  },\n      _listeners = {},\n      _emptyArray = [],\n      _media = [],\n      _creatingMedia,\n      _lastMediaTick,\n      _onMediaChange = function _onMediaChange(e) {\n    var tick = gsap$1.ticker.frame,\n        matches = [],\n        i = 0,\n        index;\n\n    if (_lastMediaTick !== tick || _startup$1) {\n      _revertAll();\n\n      for (; i < _media.length; i += 4) {\n        index = _win$1.matchMedia(_media[i]).matches;\n\n        if (index !== _media[i + 3]) {\n          _media[i + 3] = index;\n          index ? matches.push(i) : _revertAll(1, _media[i]) || _isFunction(_media[i + 2]) && _media[i + 2]();\n        }\n      }\n\n      _revertRecorded();\n\n      for (i = 0; i < matches.length; i++) {\n        index = matches[i];\n        _creatingMedia = _media[index];\n        _media[index + 2] = _media[index + 1](e);\n      }\n\n      _creatingMedia = 0;\n      _coreInitted$1 && _refreshAll(0, 1);\n      _lastMediaTick = tick;\n\n      _dispatch(\"matchMedia\");\n    }\n  },\n      _softRefresh = function _softRefresh() {\n    return _removeListener$1(ScrollTrigger$1, \"scrollEnd\", _softRefresh) || _refreshAll(true);\n  },\n      _dispatch = function _dispatch(type) {\n    return _listeners[type] && _listeners[type].map(function (f) {\n      return f();\n    }) || _emptyArray;\n  },\n      _savedStyles = [],\n      _revertRecorded = function _revertRecorded(media) {\n    for (var i = 0; i < _savedStyles.length; i += 5) {\n      if (!media || _savedStyles[i + 4] === media) {\n        _savedStyles[i].style.cssText = _savedStyles[i + 1];\n        _savedStyles[i].getBBox && _savedStyles[i].setAttribute(\"transform\", _savedStyles[i + 2] || \"\");\n        _savedStyles[i + 3].uncache = 1;\n      }\n    }\n  },\n      _revertAll = function _revertAll(kill, media) {\n    var trigger;\n\n    for (_i = 0; _i < _triggers.length; _i++) {\n      trigger = _triggers[_i];\n\n      if (!media || trigger.media === media) {\n        if (kill) {\n          trigger.kill(1);\n        } else {\n          trigger.revert();\n        }\n      }\n    }\n\n    media && _revertRecorded(media);\n    media || _dispatch(\"revert\");\n  },\n      _clearScrollMemory = function _clearScrollMemory() {\n    return _scrollers.cache++ && _scrollers.forEach(function (obj) {\n      return typeof obj === \"function\" && (obj.rec = 0);\n    });\n  },\n      _refreshingAll,\n      _refreshID = 0,\n      _refreshAll = function _refreshAll(force, skipRevert) {\n    if (_lastScrollTime && !force) {\n      _addListener$1(ScrollTrigger$1, \"scrollEnd\", _softRefresh);\n\n      return;\n    }\n\n    _refreshingAll = true;\n\n    var refreshInits = _dispatch(\"refreshInit\");\n\n    _sort && ScrollTrigger$1.sort();\n    skipRevert || _revertAll();\n\n    _triggers.slice(0).forEach(function (t) {\n      return t.refresh();\n    });\n\n    _triggers.forEach(function (t) {\n      return t.vars.end === \"max\" && t.setPositions(t.start, _maxScroll(t.scroller, t._dir));\n    });\n\n    refreshInits.forEach(function (result) {\n      return result && result.render && result.render(-1);\n    });\n\n    _clearScrollMemory();\n\n    _resizeDelay.pause();\n\n    _refreshID++;\n    _refreshingAll = false;\n\n    _dispatch(\"refresh\");\n  },\n      _lastScroll = 0,\n      _direction = 1,\n      _primary,\n      _updateAll = function _updateAll() {\n    if (!_refreshingAll) {\n      ScrollTrigger$1.isUpdating = true;\n      _primary && _primary.update(0);\n\n      var l = _triggers.length,\n          time = _getTime$1(),\n          recordVelocity = time - _time1 >= 50,\n          scroll = l && _triggers[0].scroll();\n\n      _direction = _lastScroll > scroll ? -1 : 1;\n      _lastScroll = scroll;\n\n      if (recordVelocity) {\n        if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {\n          _lastScrollTime = 0;\n\n          _dispatch(\"scrollEnd\");\n        }\n\n        _time2 = _time1;\n        _time1 = time;\n      }\n\n      if (_direction < 0) {\n        _i = l;\n\n        while (_i-- > 0) {\n          _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n        }\n\n        _direction = 1;\n      } else {\n        for (_i = 0; _i < l; _i++) {\n          _triggers[_i] && _triggers[_i].update(0, recordVelocity);\n        }\n      }\n\n      ScrollTrigger$1.isUpdating = false;\n    }\n\n    _rafID = 0;\n  },\n      _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, \"display\", \"flexShrink\", \"float\", \"zIndex\", \"gridColumnStart\", \"gridColumnEnd\", \"gridRowStart\", \"gridRowEnd\", \"gridArea\", \"justifySelf\", \"alignSelf\", \"placeSelf\", \"order\"],\n      _stateProps = _propNamesToCopy.concat([_width, _height, \"boxSizing\", \"max\" + _Width, \"max\" + _Height, \"position\", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),\n      _swapPinOut = function _swapPinOut(pin, spacer, state) {\n    _setState(state);\n\n    var cache = pin._gsap;\n\n    if (cache.spacerIsNative) {\n      _setState(cache.spacerState);\n    } else if (pin.parentNode === spacer) {\n      var parent = spacer.parentNode;\n\n      if (parent) {\n        parent.insertBefore(pin, spacer);\n        parent.removeChild(spacer);\n      }\n    }\n  },\n      _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {\n    if (pin.parentNode !== spacer) {\n      var i = _propNamesToCopy.length,\n          spacerStyle = spacer.style,\n          pinStyle = pin.style,\n          p;\n\n      while (i--) {\n        p = _propNamesToCopy[i];\n        spacerStyle[p] = cs[p];\n      }\n\n      spacerStyle.position = cs.position === \"absolute\" ? \"absolute\" : \"relative\";\n      cs.display === \"inline\" && (spacerStyle.display = \"inline-block\");\n      pinStyle[_bottom] = pinStyle[_right] = spacerStyle.flexBasis = \"auto\";\n      spacerStyle.overflow = \"visible\";\n      spacerStyle.boxSizing = \"border-box\";\n      spacerStyle[_width] = _getSize(pin, _horizontal) + _px;\n      spacerStyle[_height] = _getSize(pin, _vertical) + _px;\n      spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = \"0\";\n\n      _setState(spacerState);\n\n      pinStyle[_width] = pinStyle[\"max\" + _Width] = cs[_width];\n      pinStyle[_height] = pinStyle[\"max\" + _Height] = cs[_height];\n      pinStyle[_padding] = cs[_padding];\n      pin.parentNode.insertBefore(spacer, pin);\n      spacer.appendChild(pin);\n    }\n  },\n      _capsExp = /([A-Z])/g,\n      _setState = function _setState(state) {\n    if (state) {\n      var style = state.t.style,\n          l = state.length,\n          i = 0,\n          p,\n          value;\n      (state.t._gsap || gsap$1.core.getCache(state.t)).uncache = 1;\n\n      for (; i < l; i += 2) {\n        value = state[i + 1];\n        p = state[i];\n\n        if (value) {\n          style[p] = value;\n        } else if (style[p]) {\n          style.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n        }\n      }\n    }\n  },\n      _getState = function _getState(element) {\n    var l = _stateProps.length,\n        style = element.style,\n        state = [],\n        i = 0;\n\n    for (; i < l; i++) {\n      state.push(_stateProps[i], style[_stateProps[i]]);\n    }\n\n    state.t = element;\n    return state;\n  },\n      _copyState = function _copyState(state, override, omitOffsets) {\n    var result = [],\n        l = state.length,\n        i = omitOffsets ? 8 : 0,\n        p;\n\n    for (; i < l; i += 2) {\n      p = state[i];\n      result.push(p, p in override ? override[p] : state[i + 1]);\n    }\n\n    result.t = state.t;\n    return result;\n  },\n      _winOffsets = {\n    left: 0,\n    top: 0\n  },\n      _parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation) {\n    _isFunction(value) && (value = value(self));\n\n    if (_isString(value) && value.substr(0, 3) === \"max\") {\n      value = scrollerMax + (value.charAt(4) === \"=\" ? _offsetToPx(\"0\" + value.substr(3), scrollerSize) : 0);\n    }\n\n    var time = containerAnimation ? containerAnimation.time() : 0,\n        p1,\n        p2,\n        element;\n    containerAnimation && containerAnimation.seek(0);\n\n    if (!_isNumber(value)) {\n      _isFunction(trigger) && (trigger = trigger(self));\n      var offsets = value.split(\" \"),\n          bounds,\n          localOffset,\n          globalOffset,\n          display;\n      element = _getTarget(trigger) || _body$1;\n      bounds = _getBounds(element) || {};\n\n      if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === \"none\") {\n        display = element.style.display;\n        element.style.display = \"block\";\n        bounds = _getBounds(element);\n        display ? element.style.display = display : element.style.removeProperty(\"display\");\n      }\n\n      localOffset = _offsetToPx(offsets[0], bounds[direction.d]);\n      globalOffset = _offsetToPx(offsets[1] || \"0\", scrollerSize);\n      value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;\n      markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);\n      scrollerSize -= scrollerSize - globalOffset;\n    } else if (markerScroller) {\n      _positionMarker(markerScroller, scrollerSize, direction, true);\n    }\n\n    if (marker) {\n      var position = value + scrollerSize,\n          isStart = marker._isStart;\n      p1 = \"scroll\" + direction.d2;\n\n      _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body$1[p1], _docEl$1[p1]) : marker.parentNode[p1]) <= position + 1);\n\n      if (useFixedPosition) {\n        scrollerBounds = _getBounds(markerScroller);\n        useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);\n      }\n    }\n\n    if (containerAnimation && element) {\n      p1 = _getBounds(element);\n      containerAnimation.seek(scrollerMax);\n      p2 = _getBounds(element);\n      containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];\n      value = value / containerAnimation._caScrollDist * scrollerMax;\n    }\n\n    containerAnimation && containerAnimation.seek(time);\n    return containerAnimation ? value : Math.round(value);\n  },\n      _prefixExp = /(webkit|moz|length|cssText|inset)/i,\n      _reparent = function _reparent(element, parent, top, left) {\n    if (element.parentNode !== parent) {\n      var style = element.style,\n          p,\n          cs;\n\n      if (parent === _body$1) {\n        element._stOrig = style.cssText;\n        cs = _getComputedStyle(element);\n\n        for (p in cs) {\n          if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === \"string\" && p !== \"0\") {\n            style[p] = cs[p];\n          }\n        }\n\n        style.top = top;\n        style.left = left;\n      } else {\n        style.cssText = element._stOrig;\n      }\n\n      gsap$1.core.getCache(element).uncache = 1;\n      parent.appendChild(element);\n    }\n  },\n      _getTweenCreator = function _getTweenCreator(scroller, direction) {\n    var getScroll = _getScrollFunc(scroller, direction),\n        prop = \"_scroll\" + direction.p2,\n        lastScroll1,\n        lastScroll2,\n        getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {\n      var tween = getTween.tween,\n          onComplete = vars.onComplete,\n          modifiers = {};\n      initialValue = initialValue || getScroll();\n      change2 = change1 && change2 || 0;\n      change1 = change1 || scrollTo - initialValue;\n      tween && tween.kill();\n      lastScroll1 = Math.round(initialValue);\n      vars[prop] = scrollTo;\n      vars.modifiers = modifiers;\n\n      modifiers[prop] = function (value) {\n        value = _round(getScroll());\n\n        if (value !== lastScroll1 && value !== lastScroll2 && Math.abs(value - lastScroll1) > 2 && Math.abs(value - lastScroll2) > 2) {\n          tween.kill();\n          getTween.tween = 0;\n        } else {\n          value = initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio;\n        }\n\n        lastScroll2 = lastScroll1;\n        return lastScroll1 = _round(value);\n      };\n\n      vars.onComplete = function () {\n        getTween.tween = 0;\n        onComplete && onComplete.call(tween);\n      };\n\n      tween = getTween.tween = gsap$1.to(scroller, vars);\n      return tween;\n    };\n\n    scroller[prop] = getScroll;\n\n    getScroll.wheelHandler = function () {\n      return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);\n    };\n\n    _addListener$1(scroller, \"wheel\", getScroll.wheelHandler);\n\n    return getTween;\n  };\n\n  var ScrollTrigger$1 = function () {\n    function ScrollTrigger(vars, animation) {\n      _coreInitted$1 || ScrollTrigger.register(gsap$1) || console.warn(\"Please gsap.registerPlugin(ScrollTrigger)\");\n      this.init(vars, animation);\n    }\n\n    var _proto = ScrollTrigger.prototype;\n\n    _proto.init = function init(vars, animation) {\n      this.progress = this.start = 0;\n      this.vars && this.kill(true, true);\n\n      if (!_enabled) {\n        this.update = this.refresh = this.kill = _passThrough;\n        return;\n      }\n\n      vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {\n        trigger: vars\n      } : vars, _defaults);\n\n      var _vars = vars,\n          onUpdate = _vars.onUpdate,\n          toggleClass = _vars.toggleClass,\n          id = _vars.id,\n          onToggle = _vars.onToggle,\n          onRefresh = _vars.onRefresh,\n          scrub = _vars.scrub,\n          trigger = _vars.trigger,\n          pin = _vars.pin,\n          pinSpacing = _vars.pinSpacing,\n          invalidateOnRefresh = _vars.invalidateOnRefresh,\n          anticipatePin = _vars.anticipatePin,\n          onScrubComplete = _vars.onScrubComplete,\n          onSnapComplete = _vars.onSnapComplete,\n          once = _vars.once,\n          snap = _vars.snap,\n          pinReparent = _vars.pinReparent,\n          pinSpacer = _vars.pinSpacer,\n          containerAnimation = _vars.containerAnimation,\n          fastScrollEnd = _vars.fastScrollEnd,\n          preventOverlaps = _vars.preventOverlaps,\n          direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _horizontal : _vertical,\n          isToggle = !scrub && scrub !== 0,\n          scroller = _getTarget(vars.scroller || _win$1),\n          scrollerCache = gsap$1.core.getCache(scroller),\n          isViewport = _isViewport$1(scroller),\n          useFixedPosition = (\"pinType\" in vars ? vars.pinType : _getProxyProp(scroller, \"pinType\") || isViewport && \"fixed\") === \"fixed\",\n          callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],\n          toggleActions = isToggle && vars.toggleActions.split(\" \"),\n          markers = \"markers\" in vars ? vars.markers : _defaults.markers,\n          borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0,\n          self = this,\n          onRefreshInit = vars.onRefreshInit && function () {\n        return vars.onRefreshInit(self);\n      },\n          getScrollerSize = _getSizeFunc(scroller, isViewport, direction),\n          getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),\n          lastSnap = 0,\n          lastRefresh = 0,\n          scrollFunc = _getScrollFunc(scroller, direction),\n          tweenTo,\n          pinCache,\n          snapFunc,\n          scroll1,\n          scroll2,\n          start,\n          end,\n          markerStart,\n          markerEnd,\n          markerStartTrigger,\n          markerEndTrigger,\n          markerVars,\n          change,\n          pinOriginalState,\n          pinActiveState,\n          pinState,\n          spacer,\n          offset,\n          pinGetter,\n          pinSetter,\n          pinStart,\n          pinChange,\n          spacingStart,\n          spacerState,\n          markerStartSetter,\n          markerEndSetter,\n          cs,\n          snap1,\n          snap2,\n          scrubTween,\n          scrubSmooth,\n          snapDurClamp,\n          snapDelayedCall,\n          prevProgress,\n          prevScroll,\n          prevAnimProgress,\n          caMarkerSetter,\n          customRevertReturn;\n\n      self.media = _creatingMedia;\n      self._dir = direction;\n      anticipatePin *= 45;\n      self.scroller = scroller;\n      self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;\n      scroll1 = scrollFunc();\n      self.vars = vars;\n      animation = animation || vars.animation;\n\n      if (\"refreshPriority\" in vars) {\n        _sort = 1;\n        vars.refreshPriority === -9999 && (_primary = self);\n      }\n\n      scrollerCache.tweenScroll = scrollerCache.tweenScroll || {\n        top: _getTweenCreator(scroller, _vertical),\n        left: _getTweenCreator(scroller, _horizontal)\n      };\n      self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];\n\n      self.scrubDuration = function (value) {\n        scrubSmooth = _isNumber(value) && value;\n\n        if (!scrubSmooth) {\n          scrubTween && scrubTween.progress(1).kill();\n          scrubTween = 0;\n        } else {\n          scrubTween ? scrubTween.duration(value) : scrubTween = gsap$1.to(animation, {\n            ease: \"expo\",\n            totalProgress: \"+=0.001\",\n            duration: scrubSmooth,\n            paused: true,\n            onComplete: function onComplete() {\n              return onScrubComplete && onScrubComplete(self);\n            }\n          });\n        }\n      };\n\n      if (animation) {\n        animation.vars.lazy = false;\n        animation._initted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.render(0, true, true);\n        self.animation = animation.pause();\n        animation.scrollTrigger = self;\n        self.scrubDuration(scrub);\n        snap1 = 0;\n        id || (id = animation.vars.id);\n      }\n\n      _triggers.push(self);\n\n      if (snap) {\n        if (!_isObject(snap) || snap.push) {\n          snap = {\n            snapTo: snap\n          };\n        }\n\n        \"scrollBehavior\" in _body$1.style && gsap$1.set(isViewport ? [_body$1, _docEl$1] : scroller, {\n          scrollBehavior: \"auto\"\n        });\n        snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === \"labels\" ? _getClosestLabel(animation) : snap.snapTo === \"labelsDirectional\" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {\n          return _snapDirectional(snap.snapTo)(value, _getTime$1() - lastRefresh < 500 ? 0 : st.direction);\n        } : gsap$1.utils.snap(snap.snapTo);\n        snapDurClamp = snap.duration || {\n          min: 0.1,\n          max: 2\n        };\n        snapDurClamp = _isObject(snapDurClamp) ? _clamp$1(snapDurClamp.min, snapDurClamp.max) : _clamp$1(snapDurClamp, snapDurClamp);\n        snapDelayedCall = gsap$1.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {\n          var scroll = scrollFunc(),\n              refreshedRecently = _getTime$1() - lastRefresh < 500,\n              tween = tweenTo.tween;\n\n          if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {\n            var progress = (scroll - start) / change,\n                totalProgress = animation && !isToggle ? animation.totalProgress() : progress,\n                velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime$1() - _time2) * 1000 || 0,\n                change1 = gsap$1.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),\n                naturalEnd = progress + (snap.inertia === false ? 0 : change1),\n                endValue = _clamp$1(0, 1, snapFunc(naturalEnd, self)),\n                endScroll = Math.round(start + endValue * change),\n                _snap = snap,\n                onStart = _snap.onStart,\n                _onInterrupt = _snap.onInterrupt,\n                _onComplete = _snap.onComplete;\n\n            if (scroll <= end && scroll >= start && endScroll !== scroll) {\n              if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {\n                return;\n              }\n\n              if (snap.inertia === false) {\n                change1 = endValue - progress;\n              }\n\n              tweenTo(endScroll, {\n                duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),\n                ease: snap.ease || \"power3\",\n                data: _abs(endScroll - scroll),\n                onInterrupt: function onInterrupt() {\n                  return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);\n                },\n                onComplete: function onComplete() {\n                  self.update();\n                  lastSnap = scrollFunc();\n                  snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;\n                  onSnapComplete && onSnapComplete(self);\n                  _onComplete && _onComplete(self);\n                }\n              }, scroll, change1 * change, endScroll - scroll - change1 * change);\n              onStart && onStart(self, tweenTo.tween);\n            }\n          } else if (self.isActive && lastSnap !== scroll) {\n            snapDelayedCall.restart(true);\n          }\n        }).pause();\n      }\n\n      id && (_ids[id] = self);\n      trigger = self.trigger = _getTarget(trigger || pin);\n      customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;\n      customRevertReturn && (customRevertReturn = customRevertReturn(self));\n      pin = pin === true ? trigger : _getTarget(pin);\n      _isString(toggleClass) && (toggleClass = {\n        targets: trigger,\n        className: toggleClass\n      });\n\n      if (pin) {\n        pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && _getComputedStyle(pin.parentNode).display === \"flex\" ? false : _padding);\n        self.pin = pin;\n        vars.force3D !== false && gsap$1.set(pin, {\n          force3D: true\n        });\n        pinCache = gsap$1.core.getCache(pin);\n\n        if (!pinCache.spacer) {\n          if (pinSpacer) {\n            pinSpacer = _getTarget(pinSpacer);\n            pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement);\n            pinCache.spacerIsNative = !!pinSpacer;\n            pinSpacer && (pinCache.spacerState = _getState(pinSpacer));\n          }\n\n          pinCache.spacer = spacer = pinSpacer || _doc$1.createElement(\"div\");\n          spacer.classList.add(\"pin-spacer\");\n          id && spacer.classList.add(\"pin-spacer-\" + id);\n          pinCache.pinState = pinOriginalState = _getState(pin);\n        } else {\n          pinOriginalState = pinCache.pinState;\n        }\n\n        self.spacer = spacer = pinCache.spacer;\n        cs = _getComputedStyle(pin);\n        spacingStart = cs[pinSpacing + direction.os2];\n        pinGetter = gsap$1.getProperty(pin);\n        pinSetter = gsap$1.quickSetter(pin, direction.a, _px);\n\n        _swapPinIn(pin, spacer, cs);\n\n        pinState = _getState(pin);\n      }\n\n      if (markers) {\n        markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;\n        markerStartTrigger = _createMarker(\"scroller-start\", id, scroller, direction, markerVars, 0);\n        markerEndTrigger = _createMarker(\"scroller-end\", id, scroller, direction, markerVars, 0, markerStartTrigger);\n        offset = markerStartTrigger[\"offset\" + direction.op.d2];\n\n        var content = _getTarget(_getProxyProp(scroller, \"content\") || scroller);\n\n        markerStart = this.markerStart = _createMarker(\"start\", id, content, direction, markerVars, offset, 0, containerAnimation);\n        markerEnd = this.markerEnd = _createMarker(\"end\", id, content, direction, markerVars, offset, 0, containerAnimation);\n        containerAnimation && (caMarkerSetter = gsap$1.quickSetter([markerStart, markerEnd], direction.a, _px));\n\n        if (!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, \"fixedMarkers\") === true)) {\n          _makePositionable(isViewport ? _body$1 : scroller);\n\n          gsap$1.set([markerStartTrigger, markerEndTrigger], {\n            force3D: true\n          });\n          markerStartSetter = gsap$1.quickSetter(markerStartTrigger, direction.a, _px);\n          markerEndSetter = gsap$1.quickSetter(markerEndTrigger, direction.a, _px);\n        }\n      }\n\n      if (containerAnimation) {\n        var oldOnUpdate = containerAnimation.vars.onUpdate,\n            oldParams = containerAnimation.vars.onUpdateParams;\n        containerAnimation.eventCallback(\"onUpdate\", function () {\n          self.update(0, 0, 1);\n          oldOnUpdate && oldOnUpdate.apply(oldParams || []);\n        });\n      }\n\n      self.previous = function () {\n        return _triggers[_triggers.indexOf(self) - 1];\n      };\n\n      self.next = function () {\n        return _triggers[_triggers.indexOf(self) + 1];\n      };\n\n      self.revert = function (revert) {\n        var r = revert !== false || !self.enabled,\n            prevRefreshing = _refreshing;\n\n        if (r !== self.isReverted) {\n          if (r) {\n            self.scroll.rec || !_refreshing || !_refreshingAll || (self.scroll.rec = scrollFunc());\n            prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0);\n            prevProgress = self.progress;\n            prevAnimProgress = animation && animation.progress();\n          }\n\n          markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {\n            return m.style.display = r ? \"none\" : \"block\";\n          });\n          r && (_refreshing = 1);\n          self.update(r);\n          _refreshing = prevRefreshing;\n          pin && (r ? _swapPinOut(pin, spacer, pinOriginalState) : (!pinReparent || !self.isActive) && _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState));\n          self.isReverted = r;\n        }\n      };\n\n      self.refresh = function (soft, force) {\n        if ((_refreshing || !self.enabled) && !force) {\n          return;\n        }\n\n        if (pin && soft && _lastScrollTime) {\n          _addListener$1(ScrollTrigger, \"scrollEnd\", _softRefresh);\n\n          return;\n        }\n\n        !_refreshingAll && onRefreshInit && onRefreshInit(self);\n        _refreshing = 1;\n        lastRefresh = _getTime$1();\n\n        if (tweenTo.tween) {\n          tweenTo.tween.kill();\n          tweenTo.tween = 0;\n        }\n\n        scrubTween && scrubTween.pause();\n        invalidateOnRefresh && animation && animation.time(-0.01, true).invalidate();\n        self.isReverted || self.revert();\n\n        var size = getScrollerSize(),\n            scrollerBounds = getScrollerOffsets(),\n            max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),\n            offset = 0,\n            otherPinOffset = 0,\n            parsedEnd = vars.end,\n            parsedEndTrigger = vars.endTrigger || trigger,\n            parsedStart = vars.start || (vars.start === 0 || !trigger ? 0 : pin ? \"0 0\" : \"0 100%\"),\n            pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer),\n            triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,\n            i = triggerIndex,\n            cs,\n            bounds,\n            scroll,\n            isVertical,\n            override,\n            curTrigger,\n            curPin,\n            oppositeScroll,\n            initted,\n            revertedPins;\n\n        while (i--) {\n          curTrigger = _triggers[i];\n          curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = 1);\n          curPin = curTrigger.pin;\n\n          if (curPin && (curPin === trigger || curPin === pin) && !curTrigger.isReverted) {\n            revertedPins || (revertedPins = []);\n            revertedPins.unshift(curTrigger);\n            curTrigger.revert();\n          }\n\n          if (curTrigger !== _triggers[i]) {\n            triggerIndex--;\n            i--;\n          }\n        }\n\n        _isFunction(parsedStart) && (parsedStart = parsedStart(self));\n        start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation) || (pin ? -0.001 : 0);\n        _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));\n\n        if (_isString(parsedEnd) && !parsedEnd.indexOf(\"+=\")) {\n          if (~parsedEnd.indexOf(\" \")) {\n            parsedEnd = (_isString(parsedStart) ? parsedStart.split(\" \")[0] : \"\") + parsedEnd;\n          } else {\n            offset = _offsetToPx(parsedEnd.substr(2), size);\n            parsedEnd = _isString(parsedStart) ? parsedStart : start + offset;\n            parsedEndTrigger = trigger;\n          }\n        }\n\n        end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? \"100% 0\" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation)) || -0.001;\n        change = end - start || (start -= 0.01) && 0.001;\n        offset = 0;\n        i = triggerIndex;\n\n        while (i--) {\n          curTrigger = _triggers[i];\n          curPin = curTrigger.pin;\n\n          if (curPin && curTrigger.start - curTrigger._pinPush < start && !containerAnimation && curTrigger.end > 0) {\n            cs = curTrigger.end - curTrigger.start;\n\n            if ((curPin === trigger || curPin === pinnedContainer) && !_isNumber(parsedStart)) {\n              offset += cs * (1 - curTrigger.progress);\n            }\n\n            curPin === pin && (otherPinOffset += cs);\n          }\n        }\n\n        start += offset;\n        end += offset;\n        self._pinPush = otherPinOffset;\n\n        if (markerStart && offset) {\n          cs = {};\n          cs[direction.a] = \"+=\" + offset;\n          pinnedContainer && (cs[direction.p] = \"-=\" + scrollFunc());\n          gsap$1.set([markerStart, markerEnd], cs);\n        }\n\n        if (pin) {\n          cs = _getComputedStyle(pin);\n          isVertical = direction === _vertical;\n          scroll = scrollFunc();\n          pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;\n          !max && end > 1 && ((isViewport ? _body$1 : scroller).style[\"overflow-\" + direction.a] = \"scroll\");\n\n          _swapPinIn(pin, spacer, cs);\n\n          pinState = _getState(pin);\n          bounds = _getBounds(pin, true);\n          oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();\n\n          if (pinSpacing) {\n            spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];\n            spacerState.t = spacer;\n            i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;\n            i && spacerState.push(direction.d, i + _px);\n\n            _setState(spacerState);\n\n            useFixedPosition && scrollFunc(prevScroll);\n          }\n\n          if (useFixedPosition) {\n            override = {\n              top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,\n              left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,\n              boxSizing: \"border-box\",\n              position: \"fixed\"\n            };\n            override[_width] = override[\"max\" + _Width] = Math.ceil(bounds.width) + _px;\n            override[_height] = override[\"max\" + _Height] = Math.ceil(bounds.height) + _px;\n            override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = \"0\";\n            override[_padding] = cs[_padding];\n            override[_padding + _Top] = cs[_padding + _Top];\n            override[_padding + _Right] = cs[_padding + _Right];\n            override[_padding + _Bottom] = cs[_padding + _Bottom];\n            override[_padding + _Left] = cs[_padding + _Left];\n            pinActiveState = _copyState(pinOriginalState, override, pinReparent);\n          }\n\n          if (animation) {\n            initted = animation._initted;\n\n            _suppressOverwrites(1);\n\n            animation.render(animation.duration(), true, true);\n            pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;\n            change !== pinChange && useFixedPosition && pinActiveState.splice(pinActiveState.length - 2, 2);\n            animation.render(0, true, true);\n            initted || animation.invalidate();\n\n            _suppressOverwrites(0);\n          } else {\n            pinChange = change;\n          }\n        } else if (trigger && scrollFunc() && !containerAnimation) {\n          bounds = trigger.parentNode;\n\n          while (bounds && bounds !== _body$1) {\n            if (bounds._pinOffset) {\n              start -= bounds._pinOffset;\n              end -= bounds._pinOffset;\n            }\n\n            bounds = bounds.parentNode;\n          }\n        }\n\n        revertedPins && revertedPins.forEach(function (t) {\n          return t.revert(false);\n        });\n        self.start = start;\n        self.end = end;\n        scroll1 = scroll2 = scrollFunc();\n\n        if (!containerAnimation) {\n          scroll1 < prevScroll && scrollFunc(prevScroll);\n          self.scroll.rec = 0;\n        }\n\n        self.revert(false);\n\n        if (snapDelayedCall) {\n          lastSnap = -1;\n          self.isActive && scrollFunc(start + change * prevProgress);\n          snapDelayedCall.restart(true);\n        }\n\n        _refreshing = 0;\n        animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress, true).render(animation.time(), true, true);\n\n        if (prevProgress !== self.progress || containerAnimation) {\n          animation && !isToggle && animation.totalProgress(prevProgress, true);\n          self.progress = prevProgress;\n          self.update(0, 0, 1);\n        }\n\n        pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));\n        onRefresh && onRefresh(self);\n      };\n\n      self.getVelocity = function () {\n        return (scrollFunc() - scroll2) / (_getTime$1() - _time2) * 1000 || 0;\n      };\n\n      self.endAnimation = function () {\n        _endAnimation(self.callbackAnimation);\n\n        if (animation) {\n          scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);\n        }\n      };\n\n      self.labelToScroll = function (label) {\n        return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;\n      };\n\n      self.getTrailing = function (name) {\n        var i = _triggers.indexOf(self),\n            a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);\n\n        return (_isString(name) ? a.filter(function (t) {\n          return t.vars.preventOverlaps === name;\n        }) : a).filter(function (t) {\n          return self.direction > 0 ? t.end <= start : t.start >= end;\n        });\n      };\n\n      self.update = function (reset, recordVelocity, forceFake) {\n        if (containerAnimation && !forceFake && !reset) {\n          return;\n        }\n\n        var scroll = self.scroll(),\n            p = reset ? 0 : (scroll - start) / change,\n            clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,\n            prevProgress = self.progress,\n            isActive,\n            wasActive,\n            toggleState,\n            action,\n            stateChanged,\n            toggled,\n            isAtMax,\n            isTakingAction;\n\n        if (recordVelocity) {\n          scroll2 = scroll1;\n          scroll1 = containerAnimation ? scrollFunc() : scroll;\n\n          if (snap) {\n            snap2 = snap1;\n            snap1 = animation && !isToggle ? animation.totalProgress() : clipped;\n          }\n        }\n\n        anticipatePin && !clipped && pin && !_refreshing && !_startup$1 && _lastScrollTime && start < scroll + (scroll - scroll2) / (_getTime$1() - _time2) * anticipatePin && (clipped = 0.0001);\n\n        if (clipped !== prevProgress && self.enabled) {\n          isActive = self.isActive = !!clipped && clipped < 1;\n          wasActive = !!prevProgress && prevProgress < 1;\n          toggled = isActive !== wasActive;\n          stateChanged = toggled || !!clipped !== !!prevProgress;\n          self.direction = clipped > prevProgress ? 1 : -1;\n          self.progress = clipped;\n\n          if (stateChanged && !_refreshing) {\n            toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3;\n\n            if (isToggle) {\n              action = !toggled && toggleActions[toggleState + 1] !== \"none\" && toggleActions[toggleState + 1] || toggleActions[toggleState];\n              isTakingAction = animation && (action === \"complete\" || action === \"reset\" || action in animation);\n            }\n          }\n\n          preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {\n            return t.endAnimation();\n          }));\n\n          if (!isToggle) {\n            if (scrubTween && !_refreshing && !_startup$1) {\n              (containerAnimation || _primary && _primary !== self) && scrubTween.render(scrubTween._dp._time - scrubTween._start);\n\n              if (scrubTween.resetTo) {\n                scrubTween.resetTo(\"totalProgress\", clipped, animation._tTime / animation._tDur);\n              } else {\n                scrubTween.vars.totalProgress = clipped;\n                scrubTween.invalidate().restart();\n              }\n            } else if (animation) {\n              animation.totalProgress(clipped, !!_refreshing);\n            }\n          }\n\n          if (pin) {\n            reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);\n\n            if (!useFixedPosition) {\n              pinSetter(_round(pinStart + pinChange * clipped));\n            } else if (stateChanged) {\n              isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction);\n\n              if (pinReparent) {\n                if (!reset && (isActive || isAtMax)) {\n                  var bounds = _getBounds(pin, true),\n                      _offset = scroll - start;\n\n                  _reparent(pin, _body$1, bounds.top + (direction === _vertical ? _offset : 0) + _px, bounds.left + (direction === _vertical ? 0 : _offset) + _px);\n                } else {\n                  _reparent(pin, spacer);\n                }\n              }\n\n              _setState(isActive || isAtMax ? pinActiveState : pinState);\n\n              pinChange !== change && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));\n            }\n          }\n\n          snap && !tweenTo.tween && !_refreshing && !_startup$1 && snapDelayedCall.restart(true);\n          toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {\n            return el.classList[isActive || once ? \"add\" : \"remove\"](toggleClass.className);\n          });\n          onUpdate && !isToggle && !reset && onUpdate(self);\n\n          if (stateChanged && !_refreshing) {\n            if (isToggle) {\n              if (isTakingAction) {\n                if (action === \"complete\") {\n                  animation.pause().totalProgress(1);\n                } else if (action === \"reset\") {\n                  animation.restart(true).pause();\n                } else if (action === \"restart\") {\n                  animation.restart(true);\n                } else {\n                  animation[action]();\n                }\n              }\n\n              onUpdate && onUpdate(self);\n            }\n\n            if (toggled || !_limitCallbacks) {\n              onToggle && toggled && _callback(self, onToggle);\n              callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n              once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0);\n\n              if (!toggled) {\n                toggleState = clipped === 1 ? 1 : 3;\n                callbacks[toggleState] && _callback(self, callbacks[toggleState]);\n              }\n            }\n\n            if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {\n              _endAnimation(self.callbackAnimation);\n\n              scrubTween ? scrubTween.progress(1) : _endAnimation(animation, !clipped, 1);\n            }\n          } else if (isToggle && onUpdate && !_refreshing) {\n            onUpdate(self);\n          }\n        }\n\n        if (markerEndSetter) {\n          var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;\n          markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));\n          markerEndSetter(n);\n        }\n\n        caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));\n      };\n\n      self.enable = function (reset, refresh) {\n        if (!self.enabled) {\n          self.enabled = true;\n\n          _addListener$1(scroller, \"resize\", _onResize);\n\n          _addListener$1(isViewport ? _doc$1 : scroller, \"scroll\", _onScroll$1);\n\n          onRefreshInit && _addListener$1(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\n          if (reset !== false) {\n            self.progress = prevProgress = 0;\n            scroll1 = scroll2 = lastSnap = scrollFunc();\n          }\n\n          refresh !== false && self.refresh();\n        }\n      };\n\n      self.getTween = function (snap) {\n        return snap && tweenTo ? tweenTo.tween : scrubTween;\n      };\n\n      self.setPositions = function (newStart, newEnd) {\n        if (pin) {\n          pinStart += newStart - start;\n          pinChange += newEnd - newStart - change;\n        }\n\n        self.start = start = newStart;\n        self.end = end = newEnd;\n        change = newEnd - newStart;\n        self.update();\n      };\n\n      self.disable = function (reset, allowAnimation) {\n        if (self.enabled) {\n          reset !== false && self.revert();\n          self.enabled = self.isActive = false;\n          allowAnimation || scrubTween && scrubTween.pause();\n          prevScroll = 0;\n          pinCache && (pinCache.uncache = 1);\n          onRefreshInit && _removeListener$1(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\n          if (snapDelayedCall) {\n            snapDelayedCall.pause();\n            tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);\n          }\n\n          if (!isViewport) {\n            var i = _triggers.length;\n\n            while (i--) {\n              if (_triggers[i].scroller === scroller && _triggers[i] !== self) {\n                return;\n              }\n            }\n\n            _removeListener$1(scroller, \"resize\", _onResize);\n\n            _removeListener$1(scroller, \"scroll\", _onScroll$1);\n          }\n        }\n      };\n\n      self.kill = function (revert, allowAnimation) {\n        self.disable(revert, allowAnimation);\n        scrubTween && !allowAnimation && scrubTween.kill();\n        id && delete _ids[id];\n\n        var i = _triggers.indexOf(self);\n\n        i >= 0 && _triggers.splice(i, 1);\n        i === _i && _direction > 0 && _i--;\n        i = 0;\n\n        _triggers.forEach(function (t) {\n          return t.scroller === self.scroller && (i = 1);\n        });\n\n        i || (self.scroll.rec = 0);\n\n        if (animation) {\n          animation.scrollTrigger = null;\n          revert && animation.render(-1);\n          allowAnimation || animation.kill();\n        }\n\n        markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {\n          return m.parentNode && m.parentNode.removeChild(m);\n        });\n        _primary === self && (_primary = 0);\n\n        if (pin) {\n          pinCache && (pinCache.uncache = 1);\n          i = 0;\n\n          _triggers.forEach(function (t) {\n            return t.pin === pin && i++;\n          });\n\n          i || (pinCache.spacer = 0);\n        }\n\n        vars.onKill && vars.onKill(self);\n      };\n\n      self.enable(false, false);\n      customRevertReturn && customRevertReturn(self);\n      !animation || !animation.add || change ? self.refresh() : gsap$1.delayedCall(0.01, function () {\n        return start || end || self.refresh();\n      }) && (change = 0.01) && (start = end = 0);\n    };\n\n    ScrollTrigger.register = function register(core) {\n      if (!_coreInitted$1) {\n        gsap$1 = core || _getGSAP$1();\n        _windowExists() && window.document && ScrollTrigger.enable();\n        _coreInitted$1 = _enabled;\n      }\n\n      return _coreInitted$1;\n    };\n\n    ScrollTrigger.defaults = function defaults(config) {\n      if (config) {\n        for (var p in config) {\n          _defaults[p] = config[p];\n        }\n      }\n\n      return _defaults;\n    };\n\n    ScrollTrigger.disable = function disable(reset, kill) {\n      _enabled = 0;\n\n      _triggers.forEach(function (trigger) {\n        return trigger[kill ? \"kill\" : \"disable\"](reset);\n      });\n\n      _removeListener$1(_win$1, \"wheel\", _onScroll$1);\n\n      _removeListener$1(_doc$1, \"scroll\", _onScroll$1);\n\n      clearInterval(_syncInterval);\n\n      _removeListener$1(_doc$1, \"touchcancel\", _passThrough);\n\n      _removeListener$1(_body$1, \"touchstart\", _passThrough);\n\n      _multiListener(_removeListener$1, _doc$1, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n\n      _multiListener(_removeListener$1, _doc$1, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n\n      _resizeDelay.kill();\n\n      _iterateAutoRefresh(_removeListener$1);\n\n      for (var i = 0; i < _scrollers.length; i += 3) {\n        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);\n\n        _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);\n      }\n    };\n\n    ScrollTrigger.enable = function enable() {\n      _win$1 = window;\n      _doc$1 = document;\n      _docEl$1 = _doc$1.documentElement;\n      _body$1 = _doc$1.body;\n\n      if (gsap$1) {\n        _toArray = gsap$1.utils.toArray;\n        _clamp$1 = gsap$1.utils.clamp;\n        _suppressOverwrites = gsap$1.core.suppressOverwrites || _passThrough;\n        gsap$1.core.globals(\"ScrollTrigger\", ScrollTrigger);\n\n        if (_body$1) {\n          _enabled = 1;\n          Observer.register(gsap$1);\n          ScrollTrigger.isTouch = Observer.isTouch;\n          _fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent);\n\n          _addListener$1(_win$1, \"wheel\", _onScroll$1);\n\n          _root$1 = [_win$1, _doc$1, _docEl$1, _body$1];\n          ScrollTrigger.matchMedia({\n            \"(orientation: portrait)\": function orientationPortrait() {\n              _setBaseDimensions();\n\n              return _setBaseDimensions;\n            }\n          });\n\n          _addListener$1(_doc$1, \"scroll\", _onScroll$1);\n\n          var bodyStyle = _body$1.style,\n              border = bodyStyle.borderTopStyle,\n              bounds,\n              i;\n          bodyStyle.borderTopStyle = \"solid\";\n          bounds = _getBounds(_body$1);\n          _vertical.m = Math.round(bounds.top + _vertical.sc()) || 0;\n          _horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;\n          border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty(\"border-top-style\");\n          _syncInterval = setInterval(_sync, 250);\n          gsap$1.delayedCall(0.5, function () {\n            return _startup$1 = 0;\n          });\n\n          _addListener$1(_doc$1, \"touchcancel\", _passThrough);\n\n          _addListener$1(_body$1, \"touchstart\", _passThrough);\n\n          _multiListener(_addListener$1, _doc$1, \"pointerdown,touchstart,mousedown\", _pointerDownHandler);\n\n          _multiListener(_addListener$1, _doc$1, \"pointerup,touchend,mouseup\", _pointerUpHandler);\n\n          _transformProp = gsap$1.utils.checkPrefix(\"transform\");\n\n          _stateProps.push(_transformProp);\n\n          _coreInitted$1 = _getTime$1();\n          _resizeDelay = gsap$1.delayedCall(0.2, _refreshAll).pause();\n          _autoRefresh = [_doc$1, \"visibilitychange\", function () {\n            var w = _win$1.innerWidth,\n                h = _win$1.innerHeight;\n\n            if (_doc$1.hidden) {\n              _prevWidth = w;\n              _prevHeight = h;\n            } else if (_prevWidth !== w || _prevHeight !== h) {\n              _onResize();\n            }\n          }, _doc$1, \"DOMContentLoaded\", _refreshAll, _win$1, \"load\", _refreshAll, _win$1, \"resize\", _onResize];\n\n          _iterateAutoRefresh(_addListener$1);\n\n          _triggers.forEach(function (trigger) {\n            return trigger.enable(0, 1);\n          });\n\n          for (i = 0; i < _scrollers.length; i += 3) {\n            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 1]);\n\n            _wheelListener(_removeListener$1, _scrollers[i], _scrollers[i + 2]);\n          }\n        }\n      }\n    };\n\n    ScrollTrigger.config = function config(vars) {\n      \"limitCallbacks\" in vars && (_limitCallbacks = !!vars.limitCallbacks);\n      var ms = vars.syncInterval;\n      ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);\n      \"ignoreMobileResize\" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);\n\n      if (\"autoRefreshEvents\" in vars) {\n        _iterateAutoRefresh(_removeListener$1) || _iterateAutoRefresh(_addListener$1, vars.autoRefreshEvents || \"none\");\n        _ignoreResize = (vars.autoRefreshEvents + \"\").indexOf(\"resize\") === -1;\n      }\n    };\n\n    ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {\n      var t = _getTarget(target),\n          i = _scrollers.indexOf(t),\n          isViewport = _isViewport$1(t);\n\n      if (~i) {\n        _scrollers.splice(i, isViewport ? 6 : 2);\n      }\n\n      if (vars) {\n        isViewport ? _proxies.unshift(_win$1, vars, _body$1, vars, _docEl$1, vars) : _proxies.unshift(t, vars);\n      }\n    };\n\n    ScrollTrigger.matchMedia = function matchMedia(vars) {\n      var mq, p, i, func, result;\n\n      for (p in vars) {\n        i = _media.indexOf(p);\n        func = vars[p];\n        _creatingMedia = p;\n\n        if (p === \"all\") {\n          func();\n        } else {\n          mq = _win$1.matchMedia(p);\n\n          if (mq) {\n            mq.matches && (result = func());\n\n            if (~i) {\n              _media[i + 1] = _combineFunc(_media[i + 1], func);\n              _media[i + 2] = _combineFunc(_media[i + 2], result);\n            } else {\n              i = _media.length;\n\n              _media.push(p, func, result);\n\n              mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n            }\n\n            _media[i + 3] = mq.matches;\n          }\n        }\n\n        _creatingMedia = 0;\n      }\n\n      return _media;\n    };\n\n    ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {\n      query || (_media.length = 0);\n      query = _media.indexOf(query);\n      query >= 0 && _media.splice(query, 4);\n    };\n\n    ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {\n      var bounds = (_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),\n          offset = bounds[horizontal ? _width : _height] * ratio || 0;\n      return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win$1.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win$1.innerHeight;\n    };\n\n    ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {\n      _isString(element) && (element = _getTarget(element));\n      var bounds = element.getBoundingClientRect(),\n          size = bounds[horizontal ? _width : _height],\n          offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf(\"%\") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;\n      return horizontal ? (bounds.left + offset) / _win$1.innerWidth : (bounds.top + offset) / _win$1.innerHeight;\n    };\n\n    return ScrollTrigger;\n  }();\n  ScrollTrigger$1.version = \"3.10.4\";\n\n  ScrollTrigger$1.saveStyles = function (targets) {\n    return targets ? _toArray(targets).forEach(function (target) {\n      if (target && target.style) {\n        var i = _savedStyles.indexOf(target);\n\n        i >= 0 && _savedStyles.splice(i, 5);\n\n        _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute(\"transform\"), gsap$1.core.getCache(target), _creatingMedia);\n      }\n    }) : _savedStyles;\n  };\n\n  ScrollTrigger$1.revert = function (soft, media) {\n    return _revertAll(!soft, media);\n  };\n\n  ScrollTrigger$1.create = function (vars, animation) {\n    return new ScrollTrigger$1(vars, animation);\n  };\n\n  ScrollTrigger$1.refresh = function (safe) {\n    return safe ? _onResize() : (_coreInitted$1 || ScrollTrigger$1.register()) && _refreshAll(true);\n  };\n\n  ScrollTrigger$1.update = _updateAll;\n  ScrollTrigger$1.clearScrollMemory = _clearScrollMemory;\n\n  ScrollTrigger$1.maxScroll = function (element, horizontal) {\n    return _maxScroll(element, horizontal ? _horizontal : _vertical);\n  };\n\n  ScrollTrigger$1.getScrollFunc = function (element, horizontal) {\n    return _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);\n  };\n\n  ScrollTrigger$1.getById = function (id) {\n    return _ids[id];\n  };\n\n  ScrollTrigger$1.getAll = function () {\n    return _triggers.filter(function (t) {\n      return t.vars.id !== \"ScrollSmoother\";\n    });\n  };\n\n  ScrollTrigger$1.isScrolling = function () {\n    return !!_lastScrollTime;\n  };\n\n  ScrollTrigger$1.snapDirectional = _snapDirectional;\n\n  ScrollTrigger$1.addEventListener = function (type, callback) {\n    var a = _listeners[type] || (_listeners[type] = []);\n    ~a.indexOf(callback) || a.push(callback);\n  };\n\n  ScrollTrigger$1.removeEventListener = function (type, callback) {\n    var a = _listeners[type],\n        i = a && a.indexOf(callback);\n    i >= 0 && a.splice(i, 1);\n  };\n\n  ScrollTrigger$1.batch = function (targets, vars) {\n    var result = [],\n        varsCopy = {},\n        interval = vars.interval || 0.016,\n        batchMax = vars.batchMax || 1e9,\n        proxyCallback = function proxyCallback(type, callback) {\n      var elements = [],\n          triggers = [],\n          delay = gsap$1.delayedCall(interval, function () {\n        callback(elements, triggers);\n        elements = [];\n        triggers = [];\n      }).pause();\n      return function (self) {\n        elements.length || delay.restart(true);\n        elements.push(self.trigger);\n        triggers.push(self);\n        batchMax <= elements.length && delay.progress(1);\n      };\n    },\n        p;\n\n    for (p in vars) {\n      varsCopy[p] = p.substr(0, 2) === \"on\" && _isFunction(vars[p]) && p !== \"onRefreshInit\" ? proxyCallback(p, vars[p]) : vars[p];\n    }\n\n    if (_isFunction(batchMax)) {\n      batchMax = batchMax();\n\n      _addListener$1(ScrollTrigger$1, \"refresh\", function () {\n        return batchMax = vars.batchMax();\n      });\n    }\n\n    _toArray(targets).forEach(function (target) {\n      var config = {};\n\n      for (p in varsCopy) {\n        config[p] = varsCopy[p];\n      }\n\n      config.trigger = target;\n      result.push(ScrollTrigger$1.create(config));\n    });\n\n    return result;\n  };\n\n  var _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {\n    current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);\n    return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;\n  },\n      _allowNativePanning = function _allowNativePanning(target, direction) {\n    if (direction === true) {\n      target.style.removeProperty(\"touch-action\");\n    } else {\n      target.style.touchAction = direction === true ? \"auto\" : direction ? \"pan-\" + direction + (Observer.isTouch ? \" pinch-zoom\" : \"\") : \"none\";\n    }\n\n    target === _docEl$1 && _allowNativePanning(_body$1, direction);\n  },\n      _overflow = {\n    auto: 1,\n    scroll: 1\n  },\n      _nestedScroll = function _nestedScroll(_ref5) {\n    var event = _ref5.event,\n        target = _ref5.target,\n        axis = _ref5.axis;\n\n    var node = (event.changedTouches ? event.changedTouches[0] : event).target,\n        cache = node._gsap || gsap$1.core.getCache(node),\n        time = _getTime$1(),\n        cs;\n\n    if (!cache._isScrollT || time - cache._isScrollT > 2000) {\n      while (node && node.scrollHeight <= node.clientHeight) {\n        node = node.parentNode;\n      }\n\n      cache._isScroll = node && !_isViewport$1(node) && node !== target && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);\n      cache._isScrollT = time;\n    }\n\n    (cache._isScroll || axis === \"x\") && (event._gsapAllow = true);\n  },\n      _inputObserver = function _inputObserver(target, type, inputs, nested) {\n    return Observer.create({\n      target: target,\n      capture: true,\n      debounce: false,\n      lockAxis: true,\n      type: type,\n      onWheel: nested = nested && _nestedScroll,\n      onPress: nested,\n      onDrag: nested,\n      onScroll: nested,\n      onEnable: function onEnable() {\n        return inputs && _addListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, false, true);\n      },\n      onDisable: function onDisable() {\n        return _removeListener$1(_doc$1, Observer.eventTypes[0], _captureInputs, true);\n      }\n    });\n  },\n      _inputExp = /(input|label|select|textarea)/i,\n      _inputIsFocused,\n      _captureInputs = function _captureInputs(e) {\n    var isInput = _inputExp.test(e.target.tagName);\n\n    if (isInput || _inputIsFocused) {\n      e._gsapAllow = true;\n      _inputIsFocused = isInput;\n    }\n  },\n      _getScrollNormalizer = function _getScrollNormalizer(vars) {\n    _isObject(vars) || (vars = {});\n    vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;\n    vars.type || (vars.type = \"wheel,touch\");\n    vars.debounce = !!vars.debounce;\n    vars.id = vars.id || \"normalizer\";\n\n    var _vars2 = vars,\n        normalizeScrollX = _vars2.normalizeScrollX,\n        momentum = _vars2.momentum,\n        allowNestedScroll = _vars2.allowNestedScroll,\n        self,\n        maxY,\n        target = _getTarget(vars.target) || _docEl$1,\n        smoother = gsap$1.core.globals().ScrollSmoother,\n        content = _fixIOSBug && (vars.content && _getTarget(vars.content) || smoother && smoother.get() && smoother.get().content()),\n        scrollFuncY = _getScrollFunc(target, _vertical),\n        scrollFuncX = _getScrollFunc(target, _horizontal),\n        scale = 1,\n        initialScale = (Observer.isTouch && _win$1.visualViewport ? _win$1.visualViewport.scale * _win$1.visualViewport.width : _win$1.outerWidth) / _win$1.innerWidth,\n        wheelRefresh = 0,\n        resolveMomentumDuration = _isFunction(momentum) ? function () {\n      return momentum(self);\n    } : function () {\n      return momentum || 2.8;\n    },\n        skipTouchMove,\n        lastRefreshID,\n        inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),\n        resumeTouchMove = function resumeTouchMove() {\n      return skipTouchMove = false;\n    },\n        scrollClampX = _passThrough,\n        scrollClampY = _passThrough,\n        updateClamps = function updateClamps() {\n      maxY = _maxScroll(target, _vertical);\n      scrollClampY = _clamp$1(_fixIOSBug ? 1 : 0, maxY);\n      normalizeScrollX && (scrollClampX = _clamp$1(0, _maxScroll(target, _horizontal)));\n      lastRefreshID = _refreshID;\n    },\n        ignoreDrag = function ignoreDrag() {\n      if (skipTouchMove) {\n        requestAnimationFrame(resumeTouchMove);\n\n        var offset = _round(self.deltaY / 2),\n            scroll = scrollClampY(scrollFuncY.v - offset);\n\n        if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {\n          scrollFuncY.offset = scroll - scrollFuncY.v;\n          content.style.transform = \"translateY(\" + -scrollFuncY.offset + \"px)\";\n          content._gsap && (content._gsap.y = -scrollFuncY.offset + \"px\");\n          scrollFuncY.cacheID = _scrollers.cache;\n\n          _updateAll();\n        }\n\n        return true;\n      }\n\n      if (content) {\n        content.style.transform = \"translateY(0px)\";\n        scrollFuncY.offset = scrollFuncY.cacheID = 0;\n        content._gsap && (content._gsap.y = \"0px\");\n      }\n\n      skipTouchMove = true;\n    },\n        tween,\n        startScrollX,\n        startScrollY,\n        onStopDelayedCall,\n        onResize = function onResize() {\n      updateClamps();\n\n      if (tween.isActive() && tween.vars.scrollY > maxY) {\n        scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo(\"scrollY\", maxY);\n      }\n    };\n\n    vars.ignoreCheck = function (e) {\n      return _fixIOSBug && e.type === \"touchmove\" && ignoreDrag() || scale > 1.05 && e.type !== \"touchstart\" || self.isGesturing || e.touches && e.touches.length > 1;\n    };\n\n    vars.onPress = function () {\n      var prevScale = scale;\n      scale = _round((_win$1.visualViewport && _win$1.visualViewport.scale || 1) / initialScale);\n      tween.pause();\n      prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : \"x\");\n      skipTouchMove = false;\n      startScrollX = scrollFuncX();\n      startScrollY = scrollFuncY();\n      updateClamps();\n      lastRefreshID = _refreshID;\n    };\n\n    vars.onRelease = vars.onGestureStart = function (self, wasDragging) {\n      if (content) {\n        content.style.transform = \"translateY(0px)\";\n        scrollFuncY.offset = scrollFuncY.cacheID = 0;\n        content._gsap && (content._gsap.y = \"0px\");\n      }\n\n      if (!wasDragging) {\n        onStopDelayedCall.restart(true);\n      } else {\n        _scrollers.cache++;\n        var dur = resolveMomentumDuration(),\n            currentScroll,\n            endScroll;\n\n        if (normalizeScrollX) {\n          currentScroll = scrollFuncX();\n          endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227;\n          dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));\n          tween.vars.scrollX = scrollClampX(endScroll);\n        }\n\n        currentScroll = scrollFuncY();\n        endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227;\n        dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));\n        tween.vars.scrollY = scrollClampY(endScroll);\n        tween.invalidate().duration(dur).play(0.01);\n\n        if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {\n          gsap$1.to({}, {\n            onUpdate: onResize,\n            duration: dur\n          });\n        }\n      }\n    };\n\n    vars.onWheel = function () {\n      tween._ts && tween.pause();\n\n      if (_getTime$1() - wheelRefresh > 1000) {\n        lastRefreshID = 0;\n        wheelRefresh = _getTime$1();\n      }\n    };\n\n    vars.onChange = function (self, dx, dy, xArray, yArray) {\n      _refreshID !== lastRefreshID && updateClamps();\n      dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1]));\n      dy && scrollFuncY(scrollClampY(yArray[2] === dy ? startScrollY + (self.startY - self.y) : scrollFuncY() + dy - yArray[1]));\n\n      _updateAll();\n    };\n\n    vars.onEnable = function () {\n      _allowNativePanning(target, normalizeScrollX ? false : \"x\");\n\n      _addListener$1(_win$1, \"resize\", onResize);\n\n      inputObserver.enable();\n    };\n\n    vars.onDisable = function () {\n      _allowNativePanning(target, true);\n\n      _removeListener$1(_win$1, \"resize\", onResize);\n\n      inputObserver.kill();\n    };\n\n    self = new Observer(vars);\n    self.iOS = _fixIOSBug;\n    _fixIOSBug && !scrollFuncY() && scrollFuncY(1);\n    onStopDelayedCall = self._dc;\n    tween = gsap$1.to(self, {\n      ease: \"power4\",\n      paused: true,\n      scrollX: normalizeScrollX ? \"+=0.1\" : \"+=0\",\n      scrollY: \"+=0.1\",\n      onComplete: onStopDelayedCall.vars.onComplete\n    });\n    return self;\n  };\n\n  ScrollTrigger$1.sort = function (func) {\n    return _triggers.sort(func || function (a, b) {\n      return (a.vars.refreshPriority || 0) * -1e6 + a.start - (b.start + (b.vars.refreshPriority || 0) * -1e6);\n    });\n  };\n\n  ScrollTrigger$1.observe = function (vars) {\n    return new Observer(vars);\n  };\n\n  ScrollTrigger$1.normalizeScroll = function (vars) {\n    if (typeof vars === \"undefined\") {\n      return _normalizer$1;\n    }\n\n    if (vars === true && _normalizer$1) {\n      return _normalizer$1.enable();\n    }\n\n    if (vars === false) {\n      return _normalizer$1 && _normalizer$1.kill();\n    }\n\n    var normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);\n    _normalizer$1 && _normalizer$1.target === normalizer.target && _normalizer$1.kill();\n    _isViewport$1(normalizer.target) && (_normalizer$1 = normalizer);\n    return normalizer;\n  };\n\n  ScrollTrigger$1.core = {\n    _getVelocityProp: _getVelocityProp,\n    _inputObserver: _inputObserver,\n    _scrollers: _scrollers,\n    _proxies: _proxies,\n    bridge: {\n      ss: function ss() {\n        _lastScrollTime || _dispatch(\"scrollStart\");\n        _lastScrollTime = _getTime$1();\n      },\n      ref: function ref() {\n        return _refreshing;\n      }\n    }\n  };\n  _getGSAP$1() && gsap$1.registerPlugin(ScrollTrigger$1);\n\n  exports.ScrollTrigger = ScrollTrigger$1;\n  exports.default = ScrollTrigger$1;\n\n  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}\n\n})));\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n\tvar emojiExp = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF](?:[\\u200D\\uFE0F][\\uD800-\\uDBFF][\\uDC00-\\uDFFF]){2,}|\\uD83D\\uDC69(?:\\u200D(?:(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67|(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC6F\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3C-\\uDD3E\\uDDD6-\\uDDDF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uFE0F\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642])\\uFE0F|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC69\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC68(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708]))\\uFE0F|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83D\\uDC69\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69]))|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]))|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDD1-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\u200D(?:(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC69\\uDC6E\\uDC70-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3D\\uDD3E\\uDDD1-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])?|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDEEB\\uDEEC\\uDEF4-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])\\uFE0F)/;\n\tfunction getText(e) {\n\t  var type = e.nodeType,\n\t      result = \"\";\n\n\t  if (type === 1 || type === 9 || type === 11) {\n\t    if (typeof e.textContent === \"string\") {\n\t      return e.textContent;\n\t    } else {\n\t      for (e = e.firstChild; e; e = e.nextSibling) {\n\t        result += getText(e);\n\t      }\n\t    }\n\t  } else if (type === 3 || type === 4) {\n\t    return e.nodeValue;\n\t  }\n\n\t  return result;\n\t}\n\n\t/*!\n\t * SplitText: 3.10.4\n\t * https://greensock.com\n\t *\n\t * @license Copyright 2008-2022, GreenSock. All rights reserved.\n\t * Subject to the terms at https://greensock.com/standard-license or for\n\t * Club GreenSock members, the agreement issued with that membership.\n\t * @author: Jack Doyle, jack@greensock.com\n\t*/\n\n\tvar _doc,\n\t    _win,\n\t    _coreInitted,\n\t    _stripExp = /(?:\\r|\\n|\\t\\t)/g,\n\t    _multipleSpacesExp = /(?:\\s\\s+)/g,\n\t    _initCore = function _initCore() {\n\t  _doc = document;\n\t  _win = window;\n\t  _coreInitted = 1;\n\t},\n\t    _getComputedStyle = function _getComputedStyle(element) {\n\t  return _win.getComputedStyle(element);\n\t},\n\t    _isArray = Array.isArray,\n\t    _slice = [].slice,\n\t    _toArray = function _toArray(value, leaveStrings) {\n\t  var type;\n\t  return _isArray(value) ? value : (type = typeof value) === \"string\" && !leaveStrings && value ? _slice.call(_doc.querySelectorAll(value), 0) : value && type === \"object\" && \"length\" in value ? _slice.call(value, 0) : value ? [value] : [];\n\t},\n\t    _isAbsolute = function _isAbsolute(vars) {\n\t  return vars.position === \"absolute\" || vars.absolute === true;\n\t},\n\t    _findSpecialChars = function _findSpecialChars(text, chars) {\n\t  var i = chars.length,\n\t      s;\n\n\t  while (--i > -1) {\n\t    s = chars[i];\n\n\t    if (text.substr(0, s.length) === s) {\n\t      return s.length;\n\t    }\n\t  }\n\t},\n\t    _divStart = \" style='position:relative;display:inline-block;'\",\n\t    _cssClassFunc = function _cssClassFunc(cssClass, tag) {\n\t  if (cssClass === void 0) {\n\t    cssClass = \"\";\n\t  }\n\n\t  var iterate = ~cssClass.indexOf(\"++\"),\n\t      num = 1;\n\n\t  if (iterate) {\n\t    cssClass = cssClass.split(\"++\").join(\"\");\n\t  }\n\n\t  return function () {\n\t    return \"<\" + tag + _divStart + (cssClass ? \" class='\" + cssClass + (iterate ? num++ : \"\") + \"'>\" : \">\");\n\t  };\n\t},\n\t    _swapText = function _swapText(element, oldText, newText) {\n\t  var type = element.nodeType;\n\n\t  if (type === 1 || type === 9 || type === 11) {\n\t    for (element = element.firstChild; element; element = element.nextSibling) {\n\t      _swapText(element, oldText, newText);\n\t    }\n\t  } else if (type === 3 || type === 4) {\n\t    element.nodeValue = element.nodeValue.split(oldText).join(newText);\n\t  }\n\t},\n\t    _pushReversed = function _pushReversed(a, merge) {\n\t  var i = merge.length;\n\n\t  while (--i > -1) {\n\t    a.push(merge[i]);\n\t  }\n\t},\n\t    _isBeforeWordDelimiter = function _isBeforeWordDelimiter(e, root, wordDelimiter) {\n\t  var next;\n\n\t  while (e && e !== root) {\n\t    next = e._next || e.nextSibling;\n\n\t    if (next) {\n\t      return next.textContent.charAt(0) === wordDelimiter;\n\t    }\n\n\t    e = e.parentNode || e._parent;\n\t  }\n\t},\n\t    _deWordify = function _deWordify(e) {\n\t  var children = _toArray(e.childNodes),\n\t      l = children.length,\n\t      i,\n\t      child;\n\n\t  for (i = 0; i < l; i++) {\n\t    child = children[i];\n\n\t    if (child._isSplit) {\n\t      _deWordify(child);\n\t    } else {\n\t      if (i && child.previousSibling && child.previousSibling.nodeType === 3) {\n\t        child.previousSibling.nodeValue += child.nodeType === 3 ? child.nodeValue : child.firstChild.nodeValue;\n\t        e.removeChild(child);\n\t      } else if (child.nodeType !== 3) {\n\t        e.insertBefore(child.firstChild, child);\n\t        e.removeChild(child);\n\t      }\n\t    }\n\t  }\n\t},\n\t    _getStyleAsNumber = function _getStyleAsNumber(name, computedStyle) {\n\t  return parseFloat(computedStyle[name]) || 0;\n\t},\n\t    _setPositionsAfterSplit = function _setPositionsAfterSplit(element, vars, allChars, allWords, allLines, origWidth, origHeight) {\n\t  var cs = _getComputedStyle(element),\n\t      paddingLeft = _getStyleAsNumber(\"paddingLeft\", cs),\n\t      lineOffsetY = -999,\n\t      borderTopAndBottom = _getStyleAsNumber(\"borderBottomWidth\", cs) + _getStyleAsNumber(\"borderTopWidth\", cs),\n\t      borderLeftAndRight = _getStyleAsNumber(\"borderLeftWidth\", cs) + _getStyleAsNumber(\"borderRightWidth\", cs),\n\t      padTopAndBottom = _getStyleAsNumber(\"paddingTop\", cs) + _getStyleAsNumber(\"paddingBottom\", cs),\n\t      padLeftAndRight = _getStyleAsNumber(\"paddingLeft\", cs) + _getStyleAsNumber(\"paddingRight\", cs),\n\t      lineThreshold = _getStyleAsNumber(\"fontSize\", cs) * (vars.lineThreshold || 0.2),\n\t      textAlign = cs.textAlign,\n\t      charArray = [],\n\t      wordArray = [],\n\t      lineArray = [],\n\t      wordDelimiter = vars.wordDelimiter || \" \",\n\t      tag = vars.tag ? vars.tag : vars.span ? \"span\" : \"div\",\n\t      types = vars.type || vars.split || \"chars,words,lines\",\n\t      lines = allLines && ~types.indexOf(\"lines\") ? [] : null,\n\t      words = ~types.indexOf(\"words\"),\n\t      chars = ~types.indexOf(\"chars\"),\n\t      absolute = _isAbsolute(vars),\n\t      linesClass = vars.linesClass,\n\t      iterateLine = ~(linesClass || \"\").indexOf(\"++\"),\n\t      spaceNodesToRemove = [],\n\t      isFlex = cs.display === \"flex\",\n\t      prevInlineDisplay = element.style.display,\n\t      i,\n\t      j,\n\t      l,\n\t      node,\n\t      nodes,\n\t      isChild,\n\t      curLine,\n\t      addWordSpaces,\n\t      style,\n\t      lineNode,\n\t      lineWidth,\n\t      offset;\n\n\t  iterateLine && (linesClass = linesClass.split(\"++\").join(\"\"));\n\t  isFlex && (element.style.display = \"block\");\n\t  j = element.getElementsByTagName(\"*\");\n\t  l = j.length;\n\t  nodes = [];\n\n\t  for (i = 0; i < l; i++) {\n\t    nodes[i] = j[i];\n\t  }\n\n\t  if (lines || absolute) {\n\t    for (i = 0; i < l; i++) {\n\t      node = nodes[i];\n\t      isChild = node.parentNode === element;\n\n\t      if (isChild || absolute || chars && !words) {\n\t        offset = node.offsetTop;\n\n\t        if (lines && isChild && Math.abs(offset - lineOffsetY) > lineThreshold && (node.nodeName !== \"BR\" || i === 0)) {\n\t          curLine = [];\n\t          lines.push(curLine);\n\t          lineOffsetY = offset;\n\t        }\n\n\t        if (absolute) {\n\t          node._x = node.offsetLeft;\n\t          node._y = offset;\n\t          node._w = node.offsetWidth;\n\t          node._h = node.offsetHeight;\n\t        }\n\n\t        if (lines) {\n\t          if (node._isSplit && isChild || !chars && isChild || words && isChild || !words && node.parentNode.parentNode === element && !node.parentNode._isSplit) {\n\t            curLine.push(node);\n\t            node._x -= paddingLeft;\n\n\t            if (_isBeforeWordDelimiter(node, element, wordDelimiter)) {\n\t              node._wordEnd = true;\n\t            }\n\t          }\n\n\t          if (node.nodeName === \"BR\" && (node.nextSibling && node.nextSibling.nodeName === \"BR\" || i === 0)) {\n\t            lines.push([]);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  for (i = 0; i < l; i++) {\n\t    node = nodes[i];\n\t    isChild = node.parentNode === element;\n\n\t    if (node.nodeName === \"BR\") {\n\t      if (lines || absolute) {\n\t        node.parentNode && node.parentNode.removeChild(node);\n\t        nodes.splice(i--, 1);\n\t        l--;\n\t      } else if (!words) {\n\t        element.appendChild(node);\n\t      }\n\n\t      continue;\n\t    }\n\n\t    if (absolute) {\n\t      style = node.style;\n\n\t      if (!words && !isChild) {\n\t        node._x += node.parentNode._x;\n\t        node._y += node.parentNode._y;\n\t      }\n\n\t      style.left = node._x + \"px\";\n\t      style.top = node._y + \"px\";\n\t      style.position = \"absolute\";\n\t      style.display = \"block\";\n\t      style.width = node._w + 1 + \"px\";\n\t      style.height = node._h + \"px\";\n\t    }\n\n\t    if (!words && chars) {\n\t      if (node._isSplit) {\n\t        node._next = j = node.nextSibling;\n\t        node.parentNode.appendChild(node);\n\n\t        while (j && j.nodeType === 3 && j.textContent === \" \") {\n\t          node._next = j.nextSibling;\n\t          node.parentNode.appendChild(j);\n\t          j = j.nextSibling;\n\t        }\n\t      } else if (node.parentNode._isSplit) {\n\t        node._parent = node.parentNode;\n\n\t        if (!node.previousSibling && node.firstChild) {\n\t          node.firstChild._isFirst = true;\n\t        }\n\n\t        if (node.nextSibling && node.nextSibling.textContent === \" \" && !node.nextSibling.nextSibling) {\n\t          spaceNodesToRemove.push(node.nextSibling);\n\t        }\n\n\t        node._next = node.nextSibling && node.nextSibling._isFirst ? null : node.nextSibling;\n\t        node.parentNode.removeChild(node);\n\t        nodes.splice(i--, 1);\n\t        l--;\n\t      } else if (!isChild) {\n\t        offset = !node.nextSibling && _isBeforeWordDelimiter(node.parentNode, element, wordDelimiter);\n\t        node.parentNode._parent && node.parentNode._parent.appendChild(node);\n\t        offset && node.parentNode.appendChild(_doc.createTextNode(\" \"));\n\n\t        if (tag === \"span\") {\n\t          node.style.display = \"inline\";\n\t        }\n\n\t        charArray.push(node);\n\t      }\n\t    } else if (node.parentNode._isSplit && !node._isSplit && node.innerHTML !== \"\") {\n\t      wordArray.push(node);\n\t    } else if (chars && !node._isSplit) {\n\t      if (tag === \"span\") {\n\t        node.style.display = \"inline\";\n\t      }\n\n\t      charArray.push(node);\n\t    }\n\t  }\n\n\t  i = spaceNodesToRemove.length;\n\n\t  while (--i > -1) {\n\t    spaceNodesToRemove[i].parentNode.removeChild(spaceNodesToRemove[i]);\n\t  }\n\n\t  if (lines) {\n\t    if (absolute) {\n\t      lineNode = _doc.createElement(tag);\n\t      element.appendChild(lineNode);\n\t      lineWidth = lineNode.offsetWidth + \"px\";\n\t      offset = lineNode.offsetParent === element ? 0 : element.offsetLeft;\n\t      element.removeChild(lineNode);\n\t    }\n\n\t    style = element.style.cssText;\n\t    element.style.cssText = \"display:none;\";\n\n\t    while (element.firstChild) {\n\t      element.removeChild(element.firstChild);\n\t    }\n\n\t    addWordSpaces = wordDelimiter === \" \" && (!absolute || !words && !chars);\n\n\t    for (i = 0; i < lines.length; i++) {\n\t      curLine = lines[i];\n\t      lineNode = _doc.createElement(tag);\n\t      lineNode.style.cssText = \"display:block;text-align:\" + textAlign + \";position:\" + (absolute ? \"absolute;\" : \"relative;\");\n\n\t      if (linesClass) {\n\t        lineNode.className = linesClass + (iterateLine ? i + 1 : \"\");\n\t      }\n\n\t      lineArray.push(lineNode);\n\t      l = curLine.length;\n\n\t      for (j = 0; j < l; j++) {\n\t        if (curLine[j].nodeName !== \"BR\") {\n\t          node = curLine[j];\n\t          lineNode.appendChild(node);\n\t          addWordSpaces && node._wordEnd && lineNode.appendChild(_doc.createTextNode(\" \"));\n\n\t          if (absolute) {\n\t            if (j === 0) {\n\t              lineNode.style.top = node._y + \"px\";\n\t              lineNode.style.left = paddingLeft + offset + \"px\";\n\t            }\n\n\t            node.style.top = \"0px\";\n\n\t            if (offset) {\n\t              node.style.left = node._x - offset + \"px\";\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      if (l === 0) {\n\t        lineNode.innerHTML = \"&nbsp;\";\n\t      } else if (!words && !chars) {\n\t        _deWordify(lineNode);\n\n\t        _swapText(lineNode, String.fromCharCode(160), \" \");\n\t      }\n\n\t      if (absolute) {\n\t        lineNode.style.width = lineWidth;\n\t        lineNode.style.height = node._h + \"px\";\n\t      }\n\n\t      element.appendChild(lineNode);\n\t    }\n\n\t    element.style.cssText = style;\n\t  }\n\n\t  if (absolute) {\n\t    if (origHeight > element.clientHeight) {\n\t      element.style.height = origHeight - padTopAndBottom + \"px\";\n\n\t      if (element.clientHeight < origHeight) {\n\t        element.style.height = origHeight + borderTopAndBottom + \"px\";\n\t      }\n\t    }\n\n\t    if (origWidth > element.clientWidth) {\n\t      element.style.width = origWidth - padLeftAndRight + \"px\";\n\n\t      if (element.clientWidth < origWidth) {\n\t        element.style.width = origWidth + borderLeftAndRight + \"px\";\n\t      }\n\t    }\n\t  }\n\n\t  isFlex && (prevInlineDisplay ? element.style.display = prevInlineDisplay : element.style.removeProperty(\"display\"));\n\n\t  _pushReversed(allChars, charArray);\n\n\t  words && _pushReversed(allWords, wordArray);\n\n\t  _pushReversed(allLines, lineArray);\n\t},\n\t    _splitRawText = function _splitRawText(element, vars, wordStart, charStart) {\n\t  var tag = vars.tag ? vars.tag : vars.span ? \"span\" : \"div\",\n\t      types = vars.type || vars.split || \"chars,words,lines\",\n\t      chars = ~types.indexOf(\"chars\"),\n\t      absolute = _isAbsolute(vars),\n\t      wordDelimiter = vars.wordDelimiter || \" \",\n\t      space = wordDelimiter !== \" \" ? \"\" : absolute ? \"&#173; \" : \" \",\n\t      wordEnd = \"</\" + tag + \">\",\n\t      wordIsOpen = 1,\n\t      specialChars = vars.specialChars ? typeof vars.specialChars === \"function\" ? vars.specialChars : _findSpecialChars : null,\n\t      text,\n\t      splitText,\n\t      i,\n\t      j,\n\t      l,\n\t      character,\n\t      hasTagStart,\n\t      testResult,\n\t      container = _doc.createElement(\"div\"),\n\t      parent = element.parentNode;\n\n\t  parent.insertBefore(container, element);\n\t  container.textContent = element.nodeValue;\n\t  parent.removeChild(element);\n\t  element = container;\n\t  text = getText(element);\n\t  hasTagStart = text.indexOf(\"<\") !== -1;\n\n\t  if (vars.reduceWhiteSpace !== false) {\n\t    text = text.replace(_multipleSpacesExp, \" \").replace(_stripExp, \"\");\n\t  }\n\n\t  if (hasTagStart) {\n\t    text = text.split(\"<\").join(\"{{LT}}\");\n\t  }\n\n\t  l = text.length;\n\t  splitText = (text.charAt(0) === \" \" ? space : \"\") + wordStart();\n\n\t  for (i = 0; i < l; i++) {\n\t    character = text.charAt(i);\n\n\t    if (specialChars && (testResult = specialChars(text.substr(i), vars.specialChars))) {\n\t      character = text.substr(i, testResult || 1);\n\t      splitText += chars && character !== \" \" ? charStart() + character + \"</\" + tag + \">\" : character;\n\t      i += testResult - 1;\n\t    } else if (character === wordDelimiter && text.charAt(i - 1) !== wordDelimiter && i) {\n\t      splitText += wordIsOpen ? wordEnd : \"\";\n\t      wordIsOpen = 0;\n\n\t      while (text.charAt(i + 1) === wordDelimiter) {\n\t        splitText += space;\n\t        i++;\n\t      }\n\n\t      if (i === l - 1) {\n\t        splitText += space;\n\t      } else if (text.charAt(i + 1) !== \")\") {\n\t        splitText += space + wordStart();\n\t        wordIsOpen = 1;\n\t      }\n\t    } else if (character === \"{\" && text.substr(i, 6) === \"{{LT}}\") {\n\t      splitText += chars ? charStart() + \"{{LT}}\" + \"</\" + tag + \">\" : \"{{LT}}\";\n\t      i += 5;\n\t    } else if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {\n\t      j = ((text.substr(i, 12).split(emojiExp) || [])[1] || \"\").length || 2;\n\t      splitText += chars && character !== \" \" ? charStart() + text.substr(i, j) + \"</\" + tag + \">\" : text.substr(i, j);\n\t      i += j - 1;\n\t    } else {\n\t      splitText += chars && character !== \" \" ? charStart() + character + \"</\" + tag + \">\" : character;\n\t    }\n\t  }\n\n\t  element.outerHTML = splitText + (wordIsOpen ? wordEnd : \"\");\n\t  hasTagStart && _swapText(parent, \"{{LT}}\", \"<\");\n\t},\n\t    _split = function _split(element, vars, wordStart, charStart) {\n\t  var children = _toArray(element.childNodes),\n\t      l = children.length,\n\t      absolute = _isAbsolute(vars),\n\t      i,\n\t      child;\n\n\t  if (element.nodeType !== 3 || l > 1) {\n\t    vars.absolute = false;\n\n\t    for (i = 0; i < l; i++) {\n\t      child = children[i];\n\t      child._next = child._isFirst = child._parent = child._wordEnd = null;\n\n\t      if (child.nodeType !== 3 || /\\S+/.test(child.nodeValue)) {\n\t        if (absolute && child.nodeType !== 3 && _getComputedStyle(child).display === \"inline\") {\n\t          child.style.display = \"inline-block\";\n\t          child.style.position = \"relative\";\n\t        }\n\n\t        child._isSplit = true;\n\n\t        _split(child, vars, wordStart, charStart);\n\t      }\n\t    }\n\n\t    vars.absolute = absolute;\n\t    element._isSplit = true;\n\t    return;\n\t  }\n\n\t  _splitRawText(element, vars, wordStart, charStart);\n\t};\n\n\tvar SplitText = function () {\n\t  function SplitText(element, vars) {\n\t    _coreInitted || _initCore();\n\t    this.elements = _toArray(element);\n\t    this.chars = [];\n\t    this.words = [];\n\t    this.lines = [];\n\t    this._originals = [];\n\t    this.vars = vars || {};\n\t     this.split(vars);\n\t  }\n\n\t  var _proto = SplitText.prototype;\n\n\t  _proto.split = function split(vars) {\n\t    this.isSplit && this.revert();\n\t    this.vars = vars = vars || this.vars;\n\t    this._originals.length = this.chars.length = this.words.length = this.lines.length = 0;\n\n\t    var i = this.elements.length,\n\t        tag = vars.tag ? vars.tag : vars.span ? \"span\" : \"div\",\n\t        wordStart = _cssClassFunc(vars.wordsClass, tag),\n\t        charStart = _cssClassFunc(vars.charsClass, tag),\n\t        origHeight,\n\t        origWidth,\n\t        e;\n\n\t    while (--i > -1) {\n\t      e = this.elements[i];\n\t      this._originals[i] = e.innerHTML;\n\t      origHeight = e.clientHeight;\n\t      origWidth = e.clientWidth;\n\n\t      _split(e, vars, wordStart, charStart);\n\n\t      _setPositionsAfterSplit(e, vars, this.chars, this.words, this.lines, origWidth, origHeight);\n\t    }\n\n\t    this.chars.reverse();\n\t    this.words.reverse();\n\t    this.lines.reverse();\n\t    this.isSplit = true;\n\t    return this;\n\t  };\n\n\t  _proto.revert = function revert() {\n\t    var originals = this._originals;\n\n\t    if (!originals) {\n\t      throw \"revert() call wasn't scoped properly.\";\n\t    }\n\n\t    this.elements.forEach(function (e, i) {\n\t      return e.innerHTML = originals[i];\n\t    });\n\t    this.chars = [];\n\t    this.words = [];\n\t    this.lines = [];\n\t    this.isSplit = false;\n\t    return this;\n\t  };\n\n\t  SplitText.create = function create(element, vars) {\n\t    return new SplitText(element, vars);\n\t  };\n\n\t  return SplitText;\n\t}();\n\tSplitText.version = \"3.10.4\";\n\n\texports.SplitText = SplitText;\n\texports.default = SplitText;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","import gsap from \"gsap\";\nimport { SplitText } from \"gsap/dist/SplitText\";\nimport Swiper, { Navigation, Pagination } from \"swiper\";\nimport ThreeDSliderModels from \"./3dSliderModels\";\n\ngsap.registerPlugin(SplitText);\n\nexport default class ThreeDSlider {\n    constructor() {\n        this.DOM = {\n            wrapper: \".js-3d-slider-wrapper\",\n            slider: \".js-3d-slider\",\n            next: \".js-3d-slider-next\",\n            prev: \".js-3d-slider-prev\",\n            pagination: \".js-3d-slider-pagination\",\n            primaryTitle: \".js-slide-title-primary\",\n            secondaryTitle: \".js-slide-title-secondary\",\n        };\n\n        this.wrapper = document.querySelector(this.DOM.wrapper);\n    }\n\n    init() {\n        if (!this.wrapper) return;\n        this.models = new ThreeDSliderModels(this.wrapper);\n\n        const slider = this.wrapper.querySelector(this.DOM.slider);\n        const next = this.wrapper.querySelector(this.DOM.next);\n        const prev = this.wrapper.querySelector(this.DOM.prev);\n        const pagination = this.wrapper.querySelector(this.DOM.pagination);\n\n        const swiper = new Swiper(slider, {\n            modules: [Navigation, Pagination],\n            loop: false,\n            pagination: {\n                el: pagination,\n                clickable: false,\n                renderBullet: (index, className) => {\n                    return `\n                        <span class=\"${className}\">\n                            <span>\n                                <svg class=\"u-icon\" viewBox=\"0 0 12 19\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M6.18029 18.7476C9.98524 18.7476 11.5688 15.6579 11.5688 10.0807V8.66682C11.5688 3.08968 9.98524 0 6.18029 0H5.38851C1.60556 0 0 3.0635 0 8.66682V10.0807C0 15.6841 1.60556 18.7476 5.38851 18.7476H6.18029ZM5.47649 16.3387C3.34308 16.3387 2.30936 14.4272 2.30936 10.6044V8.14315C2.30936 4.32032 3.34308 2.4089 5.47649 2.4089H6.11431C8.24772 2.4089 9.28143 4.32032 9.28143 8.14315V10.6044C9.28143 14.4272 8.24772 16.3387 6.11431 16.3387H5.47649Z\"/>\n                                </svg>\n                            </span>\n                            <span>\n                                <svg class=\"u-icon\" viewBox=\"0 0 8 19\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M2.6973 1.57724L0.851562 0H7.27867L5.43294 1.57724V16.7863L7.27867 18.3635H0.851562L2.6973 16.7863V1.57724Z\"/>\n                                </svg>\n                            </span>\n                        </span>`;\n                },\n            },\n            navigation: {\n                nextEl: next,\n                prevEl: prev,\n            },\n            on: {\n                slideChange: (swiper) => {\n                    this.animateTitles(swiper);\n\n                    this.models.changeSlide(swiper.activeIndex, swiper.previousIndex);\n                },\n                afterInit: (swiper) => {\n                    this.models.init();\n\n                    swiper.slides.forEach((slide, index) => this.models.initModel(slide, index));\n\n                    this.onScrollAnimation(swiper.slides[0], swiper);\n                },\n            },\n        });\n\n        swiper.slides.forEach((slide) => {\n            const titlePrimary = slide.querySelector(this.DOM.primaryTitle);\n            const titleSecondary = slide.querySelector(this.DOM.secondaryTitle);\n\n            const splitPrimary = new SplitText(titlePrimary, {\n                type: \"chars\",\n                charsClass: \"split-text-char\",\n            });\n\n            const splitSecondary = new SplitText(titleSecondary, {\n                type: \"chars\",\n                charsClass: \"split-text-char\",\n            });\n\n            gsap.set(splitPrimary.chars, {\n                visibility: \"hidden\",\n            });\n        });\n    }\n\n    animateTitles(swiper) {\n        this.animateTitleIn(swiper.slides[swiper.activeIndex]);\n\n        if (swiper.slides[swiper.previousIndex]) {\n            this.animateTitleOut(swiper.slides[swiper.previousIndex]);\n        }\n    }\n\n    animateTitleIn(slide) {\n        const titlePrimaryChars = slide.querySelector(this.DOM.primaryTitle).querySelectorAll(\".split-text-char\");\n        const titleSecondaryChars = slide.querySelector(this.DOM.secondaryTitle).querySelectorAll(\".split-text-char\");\n\n        gsap.to(titlePrimaryChars, {\n            visibility: \"visible\",\n            delay: 0.6,\n            duration: 0.2,\n            stagger: {\n                each: 0.05,\n                from: \"center\",\n            },\n        });\n\n        gsap.to(titleSecondaryChars, {\n            visibility: \"hidden\",\n            delay: 0.4,\n            duration: 0.2,\n            stagger: {\n                each: 0.05,\n                from: \"center\",\n            },\n        });\n    }\n\n    animateTitleOut(slide) {\n        const titlePrimaryChars = slide.querySelector(this.DOM.primaryTitle).querySelectorAll(\".split-text-char\");\n        const titleSecondaryChars = slide.querySelector(this.DOM.secondaryTitle).querySelectorAll(\".split-text-char\");\n\n        gsap.to(titlePrimaryChars, {\n            visibility: \"hidden\",\n        });\n\n        gsap.to(titleSecondaryChars, {\n            visibility: \"visible\",\n        });\n    }\n\n    onScrollAnimation(firstSlide, swiper) {\n        if (!firstSlide) return;\n\n        gsap.fromTo(\n            firstSlide,\n            {\n                x: \"100%\",\n                autoAlpha: 0,\n            },\n            {\n                x: \"0%\",\n                autoAlpha: 1,\n                ease: \"power4.out\",\n                duration: 1.2,\n                scrollTrigger: {\n                    trigger: this.wrapper,\n                    start: \"top 40%\",\n                    end: \"bottom bottom\",\n                },\n                onStart: () => this.animateTitles(swiper),\n            },\n        );\n    }\n}\n","import gsap from \"gsap\";\nimport * as THREE from \"three\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\nimport is from \"is_js\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class ThreeDSliderModels {\n    constructor(wrapper) {\n        this.DOM = {\n            models: \".js-3d-slider-models\",\n            slide: \".js-3d-slider-slide\",\n        };\n\n        this.models = wrapper.querySelector(this.DOM.models);\n\n        // config\n        this.config = {\n            modelOffset: 6,\n            modelScale: 1,\n        };\n    }\n\n    init() {\n        if (!this.models) return;\n\n        this.modelsArray = [];\n\n        this.modelsWrapper = new THREE.Object3D();\n\n        this.loader = new GLTFLoader();\n\n        // loader\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath(window.dracoPath);\n        dracoLoader.setDecoderConfig({\n            type: \"js\",\n        });\n        this.loader.setDRACOLoader(dracoLoader);\n\n        THREE.Cache.enabled = true;\n\n        this.resizeModels();\n\n        this.width = this.models.offsetWidth;\n        this.height = this.models.offsetHeight;\n\n        this.initCamera();\n        this.initScene();\n        this.initLights();\n        this.initRenderer();\n        this.animate();\n        this.onScrollAnimation();\n\n        if (!is.mobile()) {\n            this.mouseMove();\n        }\n\n        this.scene.add(this.modelsWrapper);\n\n        // handle resize\n        window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n    }\n\n    onScrollAnimation() {\n        gsap.timeline({\n            scrollTrigger: {\n                trigger: this.models,\n                start: \"top 30%\",\n                end: \"bottom bottom\",\n            },\n        })\n            .add(\"start\")\n            .fromTo(\n                this.modelsWrapper.position,\n                {\n                    y: -3,\n                },\n                {\n                    y: 0,\n                    ease: \"power4.out\",\n                    duration: 1,\n                },\n                \"start\",\n            )\n            .fromTo(\n                this.modelsWrapper.rotation,\n                {\n                    x: -3,\n                },\n                {\n                    x: 0,\n                    ease: \"power4.out\",\n                    duration: 1,\n                },\n                \"start\",\n            );\n    }\n\n    resizeModels() {\n        ScrollTrigger.matchMedia({\n            \"(min-width: 1100px)\": () => {\n                if (this.config.modelScale !== 0.9) {\n                    this.config.modelScale = 0.9;\n                }\n            },\n            \"(max-width: 801px)\": () => {\n                if (this.config.modelScale !== 0.7) {\n                    this.config.modelScale = 0.7;\n                }\n            },\n            \"(max-width: 600px)\": () => {\n                if (this.config.modelScale !== 0.6) {\n                    this.config.modelScale = 0.7;\n                }\n            },\n            \"(max-width: 475px)\": () => {\n                if (this.config.modelScale !== 0.6) {\n                    this.config.modelScale = 0.7;\n                }\n            },\n        });\n    }\n\n    mouseMove() {\n        const halfHeight = this.height / 2;\n        const singlePercentCoefficient = 0.05 / halfHeight;\n\n        window.addEventListener(\"mousemove\", (ev) => {\n            let mouseY = ev.clientY;\n\n            gsap.to(this.yellowLight.position, {\n                y: -1 - (mouseY - window.innerHeight) / 400,\n            });\n\n            gsap.to(this.blueLight.position, {\n                y: -(mouseY - window.innerHeight) / 400,\n            });\n\n            gsap.to(this.modelsWrapper.rotation, {\n                x: -singlePercentCoefficient * (halfHeight - ev.clientY),\n                delay: 0.1,\n            });\n        });\n    }\n\n    /**\n     * camera setup\n     */\n    initCamera() {\n        this.camera = new THREE.PerspectiveCamera(35, this.width / this.height, 0.5, 100);\n        this.camera.position.set(0, 0, 6);\n        this.camera.lookAt(0, 0, 0);\n    }\n\n    /**\n     * scene setup\n     */\n    initScene() {\n        this.scene = new THREE.Scene();\n    }\n\n    /**\n     * lights setup - because of performance > all in one object\n     */\n    initLights() {\n        const lightWrapper = new THREE.Object3D();\n\n        this.yellowLight = new THREE.PointLight(0xfeb301, 5, 4);\n        this.yellowLight.position.set(-1, 1, 2);\n\n        this.blueLight = new THREE.PointLight(0x2400ff, 5, 2);\n        this.blueLight.position.set(1, 0, 1);\n\n        lightWrapper.add(this.blueLight);\n        lightWrapper.add(this.yellowLight);\n\n        this.scene.add(lightWrapper);\n    }\n\n    /**\n     * renderer setup\n     */\n    initRenderer() {\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            powerPreference: \"high-performance\",\n            alpha: true,\n        });\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        this.renderer.setClearColor(0x000000, 0);\n        this.renderer.setPixelRatio(window.devicePixelRatio > 2 ? 2 : window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.physicallyCorrectLights = true;\n        this.models.appendChild(this.renderer.domElement);\n    }\n\n    /**\n     * model setup and load call\n     */\n    initModel(slide, index) {\n        if (!slide) return;\n\n        this.loader.load(\n            slide.dataset.model,\n            (gltf) => {\n                gltf.scene.rotation.y = -Math.PI / 2;\n\n                gltf.scene.position.x = index * this.config.modelOffset;\n\n                gltf.scene.scale.set(this.config.modelScale, this.config.modelScale, this.config.modelScale);\n\n                gltf.scene.uuid = index;\n\n                this.modelsArray.push(gltf.scene);\n\n                this.modelsWrapper.add(gltf.scene);\n            },\n            (xhr) => {\n                // console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n            },\n            (error) => {\n                // console.log(\"An error happened\");\n            },\n        );\n    }\n\n    /**\n     *\n     */\n    onWindowResize() {\n        this.resizeModels();\n\n        this.modelsWrapper.children.forEach((model) => model.scale.set(this.config.modelScale, this.config.modelScale, this.config.modelScale));\n\n        this.camera.aspect = this.models.offsetWidth / this.models.offsetHeight;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize(this.models.offsetWidth, this.models.offsetHeight);\n    }\n\n    /**\n     * requestAnimationFrame\n     */\n    animate() {\n        let raf = null;\n\n        const animate = () => {\n            this.renderer.render(this.scene, this.camera);\n            if (this.renderer != null) {\n                raf = requestAnimationFrame(animate);\n            }\n        };\n\n        ScrollTrigger.create({\n            trigger: this.models,\n            start: \"top bottom\",\n            end: \"bottom top\",\n            onEnter: () => {\n                raf = requestAnimationFrame(animate);\n            },\n            onLeave: () => {\n                cancelAnimationFrame(raf);\n            },\n            onEnterBack: () => {\n                raf = requestAnimationFrame(animate);\n            },\n            onLeaveBack: () => {\n                cancelAnimationFrame(raf);\n            },\n        });\n    }\n\n    changeSlide(index, prevIndex) {\n        const model = this.modelsArray.find((model) => model.uuid === index);\n        const prevModel = this.modelsArray.find((model) => model.uuid === prevIndex);\n\n        const direction = prevIndex > index ? 1 : -1;\n\n        gsap.timeline()\n            .add(\"start\")\n            .to(\n                this.modelsWrapper.position,\n                {\n                    x: -index * this.config.modelOffset,\n                    duration: 2,\n                    ease: \"power4.out\",\n                },\n                \"start\",\n            )\n            .fromTo(\n                model.rotation,\n                {\n                    y: -Math.PI / 2 + 2.5 * direction,\n                },\n                {\n                    y: -Math.PI / 2,\n                    duration: 2,\n                    ease: \"power4.out\",\n                },\n                \"start\",\n            )\n            .fromTo(\n                prevModel.rotation,\n                {\n                    y: -Math.PI / 2,\n                },\n                {\n                    y: -Math.PI / 2 + -2.5 * direction,\n                    duration: 2,\n                    ease: \"power4.out\",\n                },\n                \"start\",\n            );\n    }\n}\n","import gsap from \"gsap\";\nimport * as THREE from \"three\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\nimport is from \"is_js\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class HeaderModel {\n    constructor() {\n        this.DOM = {\n            wrapper: \".js-contact-model-wrapper\",\n        };\n\n        this.wrapper = document.querySelector(this.DOM.wrapper);\n        this.model = null;\n\n        // config\n        this.config = {\n            modelOffset: 6,\n            modelScale: 1,\n        };\n    }\n\n    init() {\n        if (!this.wrapper) return;\n\n        this.loader = new GLTFLoader();\n\n        // loader\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath(window.dracoPath);\n        dracoLoader.setDecoderConfig({\n            type: \"js\",\n        });\n        this.loader.setDRACOLoader(dracoLoader);\n\n        THREE.Cache.enabled = true;\n\n        this.resizeModels();\n\n        this.width = this.wrapper.offsetWidth;\n        this.height = this.wrapper.offsetHeight;\n\n        this.initCamera();\n        this.initScene();\n        this.initLights();\n        this.initRenderer();\n        this.animate();\n        if (!is.mobile()) {\n            this.mouseMove();\n        }\n        this.initModel();\n\n        // handle resize\n        window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n    }\n\n    resizeModels() {\n        ScrollTrigger.matchMedia({\n            \"(min-width: 1100px)\": () => {\n                if (this.config.modelScale !== 0.9) {\n                    this.config.modelScale = 0.9;\n                }\n            },\n            \"(max-width: 801px)\": () => {\n                if (this.config.modelScale !== 0.7) {\n                    this.config.modelScale = 0.7;\n                }\n            },\n            \"(max-width: 600px)\": () => {\n                if (this.config.modelScale !== 0.6) {\n                    this.config.modelScale = 0.6;\n                }\n            },\n            \"(max-width: 475px)\": () => {\n                if (this.config.modelScale !== 0.6) {\n                    this.config.modelScale = 0.6;\n                }\n            },\n        });\n    }\n\n    mouseMove() {\n        window.addEventListener(\"mousemove\", (ev) => {\n            let mouseY = ev.clientY;\n\n            gsap.to(this.yellowLight.position, {\n                y: -1 - (mouseY - window.innerHeight) / 400,\n            });\n\n            gsap.to(this.blueLight.position, {\n                y: -(mouseY - window.innerHeight) / 400,\n            });\n        });\n    }\n\n    /**\n     * camera setup\n     */\n    initCamera() {\n        this.camera = new THREE.PerspectiveCamera(35, this.width / this.height, 0.5, 100);\n        this.camera.position.set(0, -0.1, 3.5);\n        this.camera.lookAt(0, -0.1, 0);\n    }\n\n    /**\n     * scene setup\n     */\n    initScene() {\n        this.scene = new THREE.Scene();\n    }\n\n    /**\n     * lights setup - because of performance > all in one object\n     */\n    initLights() {\n        const lightWrapper = new THREE.Object3D();\n\n        this.yellowLight = new THREE.PointLight(0xfeb301, 5, 4);\n        this.yellowLight.position.set(-1, 1, 2);\n\n        this.blueLight = new THREE.PointLight(0x2400ff, 5, 2);\n        this.blueLight.position.set(1, 0, 1);\n\n        lightWrapper.add(this.blueLight);\n        lightWrapper.add(this.yellowLight);\n\n        this.scene.add(lightWrapper);\n    }\n\n    /**\n     * renderer setup\n     */\n    initRenderer() {\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            powerPreference: \"high-performance\",\n            alpha: true,\n        });\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        this.renderer.setClearColor(0x000000, 0);\n        this.renderer.setPixelRatio(window.devicePixelRatio > 2 ? 2 : window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.physicallyCorrectLights = true;\n        this.wrapper.appendChild(this.renderer.domElement);\n    }\n\n    /**\n     * model setup and load call\n     */\n    initModel() {\n        if (this.wrapper.dataset?.model === \"\" || this.wrapper.dataset?.model === null) return;\n\n        this.loader.load(\n            this.wrapper.dataset.model,\n            (gltf) => {\n                gltf.scene.rotation.y = -Math.PI / 2;\n\n                gltf.scene.scale.set(this.config.modelScale, this.config.modelScale, this.config.modelScale);\n\n                this.model = gltf.scene;\n\n                this.scrollModelAnimation(gltf.scene);\n\n                this.scene.add(gltf.scene);\n            },\n            (xhr) => {\n                // console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n            },\n            (error) => {\n                // console.log(\"An error happened\");\n            },\n        );\n    }\n\n    scrollModelAnimation(model) {\n        gsap.fromTo(\n            model.rotation,\n            {\n                y: \"+=0.25\",\n                x: \"-=0.1\",\n            },\n            {\n                y: \"-=0.5\",\n                x: \"+=0.2\",\n                scrollTrigger: {\n                    trigger: this.wrapper,\n                    start: \"top bottom\",\n                    end: \"top top\",\n                    scrub: 0.8,\n                },\n            },\n        );\n    }\n\n    /**\n     *\n     */\n    onWindowResize() {\n        this.resizeModels();\n\n        this.model.scale.set(this.config.modelScale, this.config.modelScale, this.config.modelScale);\n\n        this.camera.aspect = this.wrapper.offsetWidth / this.wrapper.offsetHeight;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize(this.wrapper.offsetWidth, this.wrapper.offsetHeight);\n    }\n\n    /**\n     * requestAnimationFrame\n     */\n    animate() {\n        let raf = null;\n\n        const animate = () => {\n            this.renderer.render(this.scene, this.camera);\n            if (this.renderer != null) {\n                raf = requestAnimationFrame(animate);\n            }\n        };\n\n        ScrollTrigger.create({\n            trigger: this.wrapper,\n            start: \"top bottom\",\n            end: \"bottom top\",\n            onEnter: () => {\n                raf = requestAnimationFrame(animate);\n            },\n            onLeave: () => {\n                cancelAnimationFrame(raf);\n            },\n            onEnterBack: () => {\n                raf = requestAnimationFrame(animate);\n            },\n            onLeaveBack: () => {\n                cancelAnimationFrame(raf);\n            },\n        });\n    }\n}\n","import gsap from \"gsap\";\nimport is from \"is_js\";\n\nexport default class Cursor {\n    constructor() {\n        this.DOM = {\n            wrapper: \".js-cursor\",\n        };\n\n        this.wrapper = document.querySelector(this.DOM.wrapper);\n        this.moved = false;\n    }\n\n    init() {\n        if (!this.wrapper || is.touchDevice()) return;\n\n        const offsetY = this.wrapper.offsetHeight * 0.5;\n        const offsetX = this.wrapper.offsetWidth * 0.05;\n\n        window.addEventListener(\"pointermove\", (ev) => {\n            if (!this.moved) {\n                this.moved = true;\n                this.wrapper.classList.add(\"is-moved\");\n            }\n\n            gsap.set(this.wrapper, {\n                x: ev.clientX - offsetX,\n                y: ev.clientY - offsetY,\n            });\n        });\n\n        window.addEventListener(\"mouseout\", (ev) => {\n            this.moved = false;\n            this.wrapper.classList.remove(\"is-moved\");\n        });\n\n        document.querySelectorAll(\"a\").forEach((link) => {\n            this.singleLink(link);\n        });\n\n        document.querySelectorAll(\".has-hover\").forEach((link) => {\n            this.singleLink(link);\n        });\n    }\n\n    singleLink(link) {\n        link.addEventListener(\"mouseenter\", () => {\n            this.wrapper.classList.add(\"is-active\");\n        });\n\n        link.addEventListener(\"mouseleave\", () => {\n            this.wrapper.classList.remove(\"is-active\");\n        });\n    }\n}\n","import gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/dist/ScrollTrigger\";\nimport { SplitText } from \"gsap/dist/SplitText\";\n\ngsap.registerPlugin(ScrollTrigger, SplitText);\n\nexport default class FlickeringText {\n    constructor() {\n        this.DOM = {\n            wrapper: \".js-flickering-text\",\n        };\n\n        this.wrappers = document.querySelectorAll(this.DOM.wrapper);\n    }\n\n    init() {\n        if (this.wrappers.length < 1) return;\n\n        this.wrappers.forEach((wrapper) => this.singleWrapper(wrapper));\n    }\n\n    singleWrapper(wrapper) {\n        const split = new SplitText(wrapper, {\n            type: \"words\",\n            wordsClass: \"u-split-text-word\",\n        });\n\n        this.animateIn(split.words, wrapper);\n\n        const texts = wrapper.querySelectorAll(\"b\");\n\n        if (texts.length < 1) return;\n\n        texts.forEach((text) => {\n            gsap.timeline({\n                delay: 1,\n                scrollTrigger: {\n                    trigger: text,\n                    start: \"top 90%\",\n                },\n            })\n                .to(text, {\n                    classList: \"is-serif\",\n                    duration: 0.05,\n                })\n                .to(text, {\n                    classList: \"\",\n                    duration: 0.05,\n                })\n                .to(text, {\n                    classList: \"is-serif\",\n                    duration: 0.075,\n                })\n                .to(text, {\n                    classList: \"\",\n                    duration: 0.075,\n                })\n                .to(text, {\n                    classList: \"is-serif\",\n                    duration: 0.1,\n                });\n        });\n    }\n\n    animateIn(words, wrapper) {\n        gsap.set(words, {\n            autoAlpha: 0,\n        });\n\n        gsap.fromTo(\n            words,\n            {\n                y: \"20%\",\n                autoAlpha: 0,\n            },\n            {\n                y: \"0%\",\n                autoAlpha: 1,\n                ease: \"power4.out\",\n                stagger: 0.05,\n                duration: 0.5,\n                scrollTrigger: {\n                    trigger: wrapper,\n                    start: \"top 90%\",\n                    end: \"bottom top\",\n                },\n            },\n        );\n    }\n}\n","import gsap from \"gsap\";\nimport * as THREE from \"three\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\nimport is from \"is_js\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class HeaderModel {\n    constructor() {\n        this.DOM = {\n            wrapper: \".js-header-model-wrapper\",\n            header: \".js-header\",\n        };\n\n        this.wrapper = document.querySelector(this.DOM.wrapper);\n        this.header = document.querySelector(this.DOM.header);\n        this.model = null;\n\n        // config\n        this.config = {\n            modelOffset: 6,\n            modelScale: 1,\n        };\n    }\n\n    init() {\n        if (!this.wrapper) return;\n\n        this.loader = new GLTFLoader();\n\n        // loader\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath(window.dracoPath);\n        dracoLoader.setDecoderConfig({\n            type: \"js\",\n        });\n        this.loader.setDRACOLoader(dracoLoader);\n\n        THREE.Cache.enabled = true;\n\n        this.resizeModels();\n\n        this.width = this.wrapper.offsetWidth;\n        this.height = this.wrapper.offsetHeight;\n\n        this.initCamera();\n        this.initScene();\n        this.initLights();\n        this.initRenderer();\n        this.animate();\n        if (!is.mobile()) {\n            this.mouseMove();\n        }\n        this.initModel();\n\n        // handle resize\n        window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n    }\n\n    resizeModels() {\n        ScrollTrigger.matchMedia({\n            \"(min-width: 1100px)\": () => {\n                if (this.config.modelScale !== 0.9) {\n                    this.config.modelScale = 0.9;\n                }\n            },\n            \"(max-width: 801px)\": () => {\n                if (this.config.modelScale !== 0.7) {\n                    this.config.modelScale = 0.7;\n                }\n            },\n            \"(max-width: 600px)\": () => {\n                if (this.config.modelScale !== 0.6) {\n                    this.config.modelScale = 0.6;\n                }\n            },\n            \"(max-width: 475px)\": () => {\n                if (this.config.modelScale !== 0.6) {\n                    this.config.modelScale = 0.6;\n                }\n            },\n        });\n    }\n\n    mouseMove() {\n        window.addEventListener(\"mousemove\", (ev) => {\n            let mouseY = ev.clientY;\n\n            gsap.to(this.yellowLight.position, {\n                y: -1 - (mouseY - window.innerHeight) / 400,\n            });\n\n            gsap.to(this.blueLight.position, {\n                y: -(mouseY - window.innerHeight) / 400,\n            });\n        });\n    }\n\n    /**\n     * camera setup\n     */\n    initCamera() {\n        this.camera = new THREE.PerspectiveCamera(35, this.width / this.height, 0.5, 100);\n        this.camera.position.set(0, 0, 6);\n        this.camera.lookAt(0, 0, 0);\n    }\n\n    /**\n     * scene setup\n     */\n    initScene() {\n        this.scene = new THREE.Scene();\n    }\n\n    /**\n     * lights setup - because of performance > all in one object\n     */\n    initLights() {\n        const lightWrapper = new THREE.Object3D();\n\n        this.yellowLight = new THREE.PointLight(0xfeb301, 5, 4);\n        this.yellowLight.position.set(-1, 1, 2);\n\n        this.blueLight = new THREE.PointLight(0x2400ff, 5, 2);\n        this.blueLight.position.set(1, 0, 1);\n\n        lightWrapper.add(this.blueLight);\n        lightWrapper.add(this.yellowLight);\n\n        this.scene.add(lightWrapper);\n    }\n\n    /**\n     * renderer setup\n     */\n    initRenderer() {\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            powerPreference: \"high-performance\",\n            alpha: true,\n        });\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        this.renderer.setClearColor(0x000000, 0);\n        this.renderer.setPixelRatio(window.devicePixelRatio > 2 ? 2 : window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.physicallyCorrectLights = true;\n        this.wrapper.appendChild(this.renderer.domElement);\n    }\n\n    /**\n     * model setup and load call\n     */\n    initModel() {\n        if (this.wrapper.dataset?.model === \"\" || this.wrapper.dataset?.model === null) return;\n\n        this.loader.load(\n            this.wrapper.dataset.model,\n            (gltf) => {\n                gltf.scene.rotation.y = -Math.PI / 2;\n\n                gltf.scene.scale.set(this.config.modelScale, this.config.modelScale, this.config.modelScale);\n\n                this.model = gltf.scene;\n\n                this.scrollModelAnimation(gltf.scene);\n\n                this.scene.add(gltf.scene);\n            },\n            (xhr) => {\n                // console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n            },\n            (error) => {\n                // console.log(\"An error happened\");\n            },\n        );\n    }\n\n    scrollModelAnimation(model) {\n        gsap.fromTo(\n            model.rotation,\n            {\n                y: \"+=0.25\",\n                x: \"-=0.1\",\n            },\n            {\n                y: \"-=0.5\",\n                x: \"+=0.2\",\n                scrollTrigger: {\n                    trigger: this.header,\n                    start: \"top top\",\n                    end: \"bottom top\",\n                    scrub: 0.8,\n                },\n            },\n        );\n    }\n\n    /**\n     *\n     */\n    onWindowResize() {\n        this.resizeModels();\n\n        this.model.scale.set(this.config.modelScale, this.config.modelScale, this.config.modelScale);\n\n        this.camera.aspect = this.wrapper.offsetWidth / this.wrapper.offsetHeight;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize(this.wrapper.offsetWidth, this.wrapper.offsetHeight);\n    }\n\n    /**\n     * requestAnimationFrame\n     */\n    animate() {\n        let raf = null;\n\n        const animate = () => {\n            this.renderer.render(this.scene, this.camera);\n            if (this.renderer != null) {\n                raf = requestAnimationFrame(animate);\n            }\n        };\n\n        ScrollTrigger.create({\n            trigger: this.wrapper,\n            start: \"top bottom\",\n            end: \"bottom top\",\n            onEnter: () => {\n                raf = requestAnimationFrame(animate);\n            },\n            onLeave: () => {\n                cancelAnimationFrame(raf);\n            },\n            onEnterBack: () => {\n                raf = requestAnimationFrame(animate);\n            },\n            onLeaveBack: () => {\n                cancelAnimationFrame(raf);\n            },\n        });\n    }\n}\n","import gsap from \"gsap\";\nimport lottie from \"lottie-web/build/player/lottie_light\";\n\nexport default class Loader {\n    constructor() {\n        this.DOM = {\n            wrapper: \".js-loader\",\n            animation: \".js-loader-animation\",\n            animationWrapper: \".js-loader-animation-wrapper\",\n            logo: \".js-nav-logo\",\n        };\n\n        this.wrapper = document.querySelector(this.DOM.wrapper);\n        this.logo = document.querySelector(this.DOM.logo).getBoundingClientRect();\n    }\n\n    init() {\n        if (!this.wrapper) return;\n        const animation = this.wrapper.querySelector(this.DOM.animation);\n        const animationWrapper = this.wrapper.querySelector(this.DOM.animationWrapper);\n\n        const json = animation.dataset.loader;\n\n        if (!json) return;\n\n        const lottieAnim = lottie.loadAnimation({\n            container: animation,\n            renderer: \"svg\",\n            autoplay: true,\n            path: json,\n        });\n\n        lottieAnim.addEventListener(\"enterFrame\", (animation) => {\n            if (animation.currentTime > lottieAnim.totalFrames - 1) {\n                lottieAnim.pause();\n                this.endOfAnimation(animationWrapper);\n            }\n        });\n    }\n\n    endOfAnimation(animationWrapper) {\n        const topOffset = animationWrapper.getBoundingClientRect().top;\n        const topLogoOffset = this.logo.top;\n        const leftLogoOffset = this.logo.left;\n        const additionOffset = (10 / 1440) * window.innerWidth;\n        let x = -(-leftLogoOffset - additionOffset + animationWrapper.offsetWidth / 2 - this.logo.width / 2);\n        let y = -(topOffset - topLogoOffset + animationWrapper.offsetHeight / 2 - this.logo.height / 2);\n        let scale = 0.7;\n        let duration = 1;\n\n        if (window.innerWidth < 800) {\n            x = 0;\n            y = 0;\n            scale = 1;\n            duration = 0;\n        }\n\n        gsap.timeline()\n            .to(animationWrapper, {\n                x: x,\n                y: y,\n                scale: scale,\n                duration: duration,\n                ease: \"power3.inOut\",\n            })\n            .to(this.wrapper, {\n                autoAlpha: 0,\n            });\n    }\n}\n","import gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n/**\n * Marquee Controller\n */\nexport default class Marquee {\n    constructor() {\n        this.DOM = {\n            item: \".js-scroll-marquee\",\n        };\n\n        this.items = document.querySelectorAll(this.DOM.item);\n    }\n\n    init() {\n        console.log(\"MarqueeController init()\");\n        if (this.items.length < 1) {\n            return;\n        }\n\n        this.items.forEach((item, index) => {\n            this.animateLine(item, index % 2 === 0);\n        });\n    }\n\n    /**\n     *\n     * @param line\n     * @param direction\n     */\n    animateLine(line, direction) {\n        let start = -window.innerWidth / 4;\n        let end = 0;\n\n        if (direction) {\n            start = 0;\n            end = -window.innerWidth / 4;\n        }\n\n        gsap.fromTo(\n            line,\n            {\n                x: start,\n            },\n            {\n                x: end,\n                scrollTrigger: {\n                    trigger: line,\n                    start: \"top bottom\",\n                    end: \"bottom top\",\n                    scrub: 0.2,\n                },\n                ease: \"none\",\n            },\n        );\n    }\n}\n","/**\n * Navigation controller\n * \"smart\" navigation which goes off screen when scrolling down for a better overview of content and UX\n * navigation appears when scrolling up\n */\nexport default class NavigationController {\n    constructor() {\n        /**\n         * Navigation DOM selectors\n         * Navigation DOM state CSS classes\n         * @type {{navigation: string, states: {navigationSlideUp: string, navigationScrolled: string, navigationFixed: string}}}\n         */\n        this.DOM = {\n            navigation: \".js-navigation\",\n            states: {\n                navigationScrolled: \"has-scrolled\",\n                navigationFixed: \"is-fixed\",\n                navigationSlideUp: \"slide-up\",\n            },\n        };\n\n        /**\n         * flag, state variable for scrolling event\n         * @type {boolean}\n         */\n        this.scrolling = false;\n        /**\n         * amount of pixels to scroll from top for adding \"has-scrolled\" state class\n         * @type {number}\n         */\n        this.scrollNavigationOffset = 200;\n        /**\n         * variable for storing amount of scroll from top position value\n         * @type {number}\n         */\n        this.previousTop = 0;\n        /**\n         * variable for storing current scroll position value\n         * @type {number}\n         */\n        this.currentTop = 0;\n        this.scrollDelta = 0;\n        this.scrollOffset = 0;\n\n        /**\n         * fetch navigation element DOM element\n         * @type {Element}\n         */\n        this.navigation = document.querySelector(this.DOM.navigation);\n    }\n\n    //region methods\n\n    /**\n     *\n     */\n    init() {\n        if (this.navigation !== null) {\n            console.log(\"Navigation init()\");\n            this.navigationController();\n        } else {\n            console.error(`${this.DOM.navigation} does not exist in the DOM!`);\n        }\n    }\n\n    /**\n     *\n     */\n    navigationController() {\n        document.addEventListener(\"scroll\", () => {\n            if (!this.scrolling) {\n                this.scrolling = true;\n\n                if (!window.requestAnimationFrame) {\n                    setTimeout(this.checkScroll(), 250);\n                } else {\n                    requestAnimationFrame(() => this.checkScroll());\n                }\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    checkScroll() {\n        /**\n         *\n         * @type {number}\n         */\n        let currentTop = window.pageYOffset | document.body.scrollTop;\n\n        this.changeNavigationState(currentTop);\n\n        this.previousTop = currentTop;\n        this.scrolling = false;\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    changeNavigationState(currentTop) {\n        if (currentTop > this.scrollNavigationOffset) {\n            this.navigation.classList.add(this.DOM.states.navigationScrolled);\n        } else {\n            this.navigation.classList.remove(this.DOM.states.navigationScrolled);\n        }\n\n        if (this.previousTop >= currentTop) {\n            this.scrollingUp(currentTop);\n        } else {\n            this.scrollingDown(currentTop);\n        }\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    scrollingUp(currentTop) {\n        if (currentTop < this.scrollNavigationOffset) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        } else if (this.previousTop - currentTop > this.scrollDelta) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        }\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    scrollingDown(currentTop) {\n        if (currentTop > this.scrollNavigationOffset + this.scrollOffset) {\n            this.navigation.classList.add(this.DOM.states.navigationSlideUp);\n        } else if (currentTop > this.scrollNavigationOffset) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        }\n    }\n\n    //endregion\n}\n","/**\n * Grid helper\n * Show grid overlay when developing\n * Not included in production bundle JS file\n */\nexport default class GridHelper {\n    constructor() {\n        /**\n         * Grid DOM selector\n         * @type {{grid: string}}\n         */\n        this.DOM = {\n            grid: \"grid\",\n        };\n\n        /**\n         * Grid options\n         * @type {{\n         * gutterFixed: boolean,\n         * initialDisplay: string,\n         * gridFixed: boolean,\n         * gutterWidth: number,\n         * gridColor: string,\n         * columnCount: number,\n         * gridWidth: number,\n         * columnBgColor: string\n         * }}\n         */\n        this.gridOptions = {\n            initialDisplay: \"none\", // \"flex\" or \"none\" — initial display for the grid — string\n            columnCount: 24, // number of grid columns — integer\n            gridWidth: 1440, // base grid used in design; value in px — integer\n            gridFixed: false, // should grid width be restricted to gridWidth or it should go full width a nd behave fluidly across all screen sizes\n            gutterWidth: 0, // grid gutters value in px — integer\n            gutterFixed: false, // should grid gutter be a fixed value (px) or fluid — integer\n            gridColor: \"rgb(255, 0, 255, 0.15)\", // grid guides color — string of an rgba or hex value\n            columnBgColor: \"rgb(255, 0, 255, 0.025)\", // grid columns background color — string of an rgba or hex value\n        };\n\n        const consoleLogStyle = [\n            \"background-color: #a6a6a6\",\n            \"color: black\",\n            \"display: block\",\n            \"line-height: 24px\",\n            \"text-align: center\",\n            \"border: 1px solid #ffffff\",\n            \"font-weight: bold\",\n        ].join(\";\");\n\n        console.info(\"toggle grid: %c Alt/Option + G \", consoleLogStyle);\n\n        this.grid = null;\n\n        this.columnWidth =\n            (this.gridOptions.gridWidth - (this.gridOptions.columnCount - 1) * this.gridOptions.gutterWidth) / this.gridOptions.columnCount;\n\n        this.columnWidthPercentage = `${(this.columnWidth / this.gridOptions.gridWidth) * 100}%`;\n\n        this.gutterWidthPercentage = `${(this.gridOptions.gutterWidth / this.gridOptions.gridWidth) * 100}%`;\n    }\n\n    init() {\n        console.log(\"GridHelper init()\");\n        this.initGrid();\n        this.keyboardShortcut();\n    }\n\n    initGrid() {\n        // create grid overlay element\n        this.grid = document.createElement(\"div\");\n        this.grid.id = this.DOM.grid;\n\n        // style grid element\n        this.grid.style.cssText = `\n            pointer-events: none;\n            display: ${this.gridOptions.initialDisplay};\n            flex-direction: row;\n            width: 100%;\n            height: 100%;\n            position: fixed;\n            top: 0;\n            left: 50%;\n            transform: translateX(-50%);\n            z-index: 999;\n        `;\n\n        if (this.gridOptions.gridFixed === true) {\n            this.grid.style.maxWidth = `${this.gridOptions.gridWidth}px`;\n        }\n\n        if (!this.gridOptions.gutterWidth > 0) {\n            this.grid.style.borderLeft = \"none\";\n        }\n\n        // add grid container to page\n        document.body.appendChild(this.grid);\n\n        // add columns to grid\n        for (var i = 0; i < this.gridOptions.columnCount; i++) {\n            var column = document.createElement(\"i\");\n            this.grid.appendChild(column);\n\n            column.style.cssText = `\n                height: auto;\n                flex-grow: 1;\n                background-color: ${this.gridOptions.columnBgColor};\n                border-left: 1px solid ${this.gridOptions.gridColor};\n            `;\n\n            if (this.gridOptions.gutterWidth > 0) {\n                column.style.borderRight = `1px solid ${this.gridOptions.gridColor}`;\n            } else {\n                this.grid.style.borderRight = `1px solid ${this.gridOptions.gridColor}`;\n            }\n\n            if (this.gridOptions.gutterFixed === true) {\n                column.style.marginRight = `${this.gridOptions.gutterWidth}px`;\n            } else {\n                column.style.marginRight = this.gutterWidthPercentage;\n                column.style.width = this.columnWidthPercentage;\n            }\n        }\n\n        this.grid.lastChild.style.marginRight = 0;\n    }\n\n    keyboardShortcut() {\n        document.addEventListener(\"keyup\", (ev) => {\n            if (ev.keyCode === 71 && ev.altKey) {\n                if (this.grid.style.display === \"none\") {\n                    this.grid.style.display = \"flex\";\n                } else {\n                    this.grid.style.display = \"none\";\n                }\n            }\n        });\n    }\n}\n","/**\n * MAIN JS FILE\n */\n\n/**\n * Helpers\n * Imports of helper functions are stripped out of bundle\n * Include them within \"start-strip-code\" and \"end-strip-code\" comments\n */\n/* start-strip-code */\nimport GridHelper from \"./helpers/GridHelper\";\n/* end-strip-code */\n/**\n * Components\n */\nimport Loader from \"./components/Loader\";\nimport NavigationController from \"./components/NavigationController\";\nimport Cursor from \"./components/Cursor\";\nimport ThreeDSlider from \"./components/3dSlider\";\nimport HeaderModel from \"./components/HeaderModel\";\nimport ContactModel from \"./components/ContactModel\";\nimport Marquee from \"./components/Marquee\";\nimport FlickeringText from \"./components/FlickeringText\";\n\n/**\n * Check if document is ready cross-browser\n * @param callback\n */\nconst ready = (callback) => {\n    if (document.readyState !== \"loading\") {\n        /**\n         * Document is already ready, call the callback directly\n         */\n        callback();\n    } else if (document.addEventListener) {\n        /**\n         * All modern browsers to register DOMContentLoaded\n         */\n        document.addEventListener(\"DOMContentLoaded\", callback);\n    } else {\n        /**\n         * Old IE browsers\n         */\n        document.attachEvent(\"onreadystatechange\", function () {\n            if (document.readyState === \"complete\") {\n                callback();\n            }\n        });\n    }\n};\n\n/**\n * Document ready callback\n */\nready(() => {\n    /**\n     * HELPERS INIT\n     * Only init helpers if they exist\n     * Will be undefined on production because of import stripping\n     */\n    if (typeof GridHelper == \"function\") {\n        const grid = new GridHelper();\n        grid.init();\n    }\n\n    const doc = document.documentElement;\n    doc.style.setProperty(\"--win-height\", `${window.innerHeight}px`);\n\n    /**\n     * COMPONENTS INIT\n     */\n\n    /**\n     * Loader\n     * @type {Loader}\n     */\n    const loader = new Loader();\n    loader.init();\n\n    /**\n     * Navigation\n     * @type {NavigationController}\n     */\n    const navigation = new NavigationController();\n    navigation.init();\n\n    /**\n     * ThreeDSlider\n     * @type {ThreeDSlider}\n     */\n    const threeDSlider = new ThreeDSlider();\n    threeDSlider.init();\n\n    /**\n     * HeaderModel\n     * @type {HeaderModel}\n     */\n    const headerModel = new HeaderModel();\n    headerModel.init();\n\n    /**\n     * ContactModel\n     * @type {ContactModel}\n     */\n    const contactModel = new ContactModel();\n    contactModel.init();\n\n    const marquee = new Marquee();\n    marquee.init();\n\n    const flickeringText = new FlickeringText();\n    flickeringText.init();\n\n    setTimeout(() => {\n        /**\n         * Cursor\n         * @type {Cursor}\n         */\n        const cursor = new Cursor();\n        cursor.init();\n    }, 500);\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}