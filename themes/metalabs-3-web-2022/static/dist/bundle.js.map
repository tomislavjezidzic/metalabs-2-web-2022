{"version":3,"sources":["node_modules/browser-pack/_prelude.js","static/js/components/3dSlider.js","static/js/components/Cursor.js","static/js/components/NavigationController.js","static/js/helpers/GridHelper.js","static/js/index.js"],"names":[],"mappings":"AAAA;;;;;;;;ACAA;AACA;AAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAEnC,YAAY;EAC7B,wBAAc;IAAA;IACV,IAAI,CAAC,GAAG,GAAG;MACP,OAAO,EAAE,uBAAuB;MAChC,MAAM,EAAE,eAAe;MACvB,IAAI,EAAE,oBAAoB;MAC1B,IAAI,EAAE,oBAAoB;MAC1B,UAAU,EAAE;IAChB,CAAC;IAED,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;EAC3D;EAAC;IAAA;IAAA,OAED,gBAAO;MACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;MAEnB,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;MAC1D,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;MACtD,IAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;MACtD,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;MAElE,IAAM,MAAM,GAAG,IAAI,eAAM,CAAC,MAAM,EAAE;QAC9B,OAAO,EAAE,CAAC,kBAAU,EAAE,kBAAU,CAAC;QACjC,IAAI,EAAE,KAAK;QACX,UAAU,EAAE;UACR,EAAE,EAAE;QACR,CAAC;QACD,UAAU,EAAE;UACR,MAAM,EAAE,IAAI;UACZ,MAAM,EAAE;QACZ;MACJ,CAAC,CAAC;IACN;EAAC;EAAA;AAAA;AAAA;;;;;;;;;ACnCL;AACA;AAAuB;AAAA;AAAA;AAAA;AAAA,IAEF,MAAM;EACvB,kBAAc;IAAA;IACV,IAAI,CAAC,GAAG,GAAG;MACP,OAAO,EAAE;IACb,CAAC;IAED,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;IACvD,IAAI,CAAC,KAAK,GAAG,KAAK;EACtB;EAAC;IAAA;IAAA,OAED,gBAAO;MAAA;MACH,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,cAAE,CAAC,WAAW,EAAE,EAAE;MAEvC,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,GAAG;MAC/C,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI;MAE/C,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAC,EAAE,EAAK;QACzC,IAAI,CAAC,KAAI,CAAC,KAAK,EAAE;UACb,KAAI,CAAC,KAAK,GAAG,IAAI;UACjB,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;QAC1C;QAEA,aAAI,CAAC,GAAG,CAAC,KAAI,CAAC,OAAO,EAAE;UACnB,CAAC,EAAE,EAAE,CAAC,OAAO,GAAG,OAAO;UACvB,CAAC,EAAE,EAAE,CAAC,OAAO,GAAG;QACpB,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;QAC7C,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC;MACzB,CAAC,CAAC;MAEF,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;QACtD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC;MACzB,CAAC,CAAC;IACN;EAAC;IAAA;IAAA,OAED,oBAAW,IAAI,EAAE;MAAA;MACb,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,YAAM;QACtC,MAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;MAC3C,CAAC,CAAC;MAEF,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,YAAM;QACtC,MAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC;MAC9C,CAAC,CAAC;IACN;EAAC;EAAA;AAAA;AAAA;;;;;;;;;;;;AChDL;AACA;AACA;AACA;AACA,GAJA,IAKqB,oBAAoB;EACrC,gCAAc;IAAA;IACV;AACR;AACA;AACA;AACA;IACQ,IAAI,CAAC,GAAG,GAAG;MACP,UAAU,EAAE,gBAAgB;MAC5B,MAAM,EAAE;QACJ,kBAAkB,EAAE,cAAc;QAClC,eAAe,EAAE,UAAU;QAC3B,iBAAiB,EAAE;MACvB;IACJ,CAAC;;IAED;AACR;AACA;AACA;IACQ,IAAI,CAAC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;AACA;IACQ,IAAI,CAAC,sBAAsB,GAAG,GAAG;IACjC;AACR;AACA;AACA;IACQ,IAAI,CAAC,WAAW,GAAG,CAAC;IACpB;AACR;AACA;AACA;IACQ,IAAI,CAAC,UAAU,GAAG,CAAC;IACnB,IAAI,CAAC,WAAW,GAAG,CAAC;IACpB,IAAI,CAAC,YAAY,GAAG,CAAC;;IAErB;AACR;AACA;AACA;IACQ,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;EACjE;;EAEA;;EAEA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,gBAAO;MACH,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;QAC1B,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC;QAChC,IAAI,CAAC,oBAAoB,EAAE;MAC/B,CAAC,MAAM;QACH,OAAO,CAAC,KAAK,WAAI,IAAI,CAAC,GAAG,CAAC,UAAU,iCAA8B;MACtE;IACJ;;IAEA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,gCAAuB;MAAA;MACnB,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,YAAM;QACtC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE;UACjB,KAAI,CAAC,SAAS,GAAG,IAAI;UAErB,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE;YAC/B,UAAU,CAAC,KAAI,CAAC,WAAW,EAAE,EAAE,GAAG,CAAC;UACvC,CAAC,MAAM;YACH,qBAAqB,CAAC;cAAA,OAAM,KAAI,CAAC,WAAW,EAAE;YAAA,EAAC;UACnD;QACJ;MACJ,CAAC,CAAC;IACN;;IAEA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,uBAAc;MACV;AACR;AACA;AACA;MACQ,IAAI,UAAU,GAAG,MAAM,CAAC,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS;MAE7D,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC;MAEtC,IAAI,CAAC,WAAW,GAAG,UAAU;MAC7B,IAAI,CAAC,SAAS,GAAG,KAAK;IAC1B;;IAEA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,+BAAsB,UAAU,EAAE;MAC9B,IAAI,UAAU,GAAG,IAAI,CAAC,sBAAsB,EAAE;QAC1C,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC;MACrE,CAAC,MAAM;QACH,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC;MACxE;MAEA,IAAI,IAAI,CAAC,WAAW,IAAI,UAAU,EAAE;QAChC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;MAChC,CAAC,MAAM;QACH,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;MAClC;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,qBAAY,UAAU,EAAE;MACpB,IAAI,UAAU,GAAG,IAAI,CAAC,sBAAsB,EAAE;QAC1C,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC;MACvE,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,EAAE;QACzD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC;MACvE;IACJ;;IAEA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,uBAAc,UAAU,EAAE;MACtB,IAAI,UAAU,GAAG,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,YAAY,EAAE;QAC9D,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC;MACpE,CAAC,MAAM,IAAI,UAAU,GAAG,IAAI,CAAC,sBAAsB,EAAE;QACjD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC;MACvE;IACJ;;IAEA;EAAA;EAAA;AAAA;AAAA;;;;;;;;;;;;AC5IJ;AACA;AACA;AACA;AACA,GAJA,IAKqB,UAAU;EAC3B,sBAAc;IAAA;IACV;AACR;AACA;AACA;IACQ,IAAI,CAAC,GAAG,GAAG;MACP,IAAI,EAAE;IACV,CAAC;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAAC,WAAW,GAAG;MACf,cAAc,EAAE,MAAM;MAAE;MACxB,WAAW,EAAE,EAAE;MAAE;MACjB,SAAS,EAAE,IAAI;MAAE;MACjB,SAAS,EAAE,IAAI;MAAE;MACjB,WAAW,EAAE,CAAC;MAAE;MAChB,WAAW,EAAE,KAAK;MAAE;MACpB,SAAS,EAAE,wBAAwB;MAAE;MACrC,aAAa,EAAE,yBAAyB,CAAE;IAC9C,CAAC;;IAED,IAAM,eAAe,GAAG,CACpB,2BAA2B,EAC3B,cAAc,EACd,gBAAgB,EAChB,mBAAmB,EACnB,oBAAoB,EACpB,2BAA2B,EAC3B,mBAAmB,CACtB,CAAC,IAAI,CAAC,GAAG,CAAC;IAEX,OAAO,CAAC,IAAI,CAAC,iCAAiC,EAAE,eAAe,CAAC;IAEhE,IAAI,CAAC,IAAI,GAAG,IAAI;IAEhB,IAAI,CAAC,WAAW,GACZ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW;IAEnI,IAAI,CAAC,qBAAqB,aAAO,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,GAAI,GAAG,MAAG;IAExF,IAAI,CAAC,qBAAqB,aAAO,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,GAAI,GAAG,MAAG;EACxG;EAAC;IAAA;IAAA,OAED,gBAAO;MACH,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC;MAChC,IAAI,CAAC,QAAQ,EAAE;MACf,IAAI,CAAC,gBAAgB,EAAE;IAC3B;EAAC;IAAA;IAAA,OAED,oBAAW;MACP;MACA,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;MACzC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI;;MAE5B;MACA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,uEAER,IAAI,CAAC,WAAW,CAAC,cAAc,uPAS7C;MAED,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,KAAK,IAAI,EAAE;QACrC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,aAAM,IAAI,CAAC,WAAW,CAAC,SAAS,OAAI;MAChE;MAEA,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,CAAC,EAAE;QACnC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,MAAM;MACvC;;MAEA;MACA,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;;MAEpC;MACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE;QACnD,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QAE7B,MAAM,CAAC,KAAK,CAAC,OAAO,+GAGI,IAAI,CAAC,WAAW,CAAC,aAAa,uDACzB,IAAI,CAAC,WAAW,CAAC,SAAS,oBACtD;QAED,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,CAAC,EAAE;UAClC,MAAM,CAAC,KAAK,CAAC,WAAW,uBAAgB,IAAI,CAAC,WAAW,CAAC,SAAS,CAAE;QACxE,CAAC,MAAM;UACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,uBAAgB,IAAI,CAAC,WAAW,CAAC,SAAS,CAAE;QAC3E;QAEA,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,KAAK,IAAI,EAAE;UACvC,MAAM,CAAC,KAAK,CAAC,WAAW,aAAM,IAAI,CAAC,WAAW,CAAC,WAAW,OAAI;QAClE,CAAC,MAAM;UACH,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,qBAAqB;UACrD,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,qBAAqB;QACnD;MACJ;MAEA,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC;IAC7C;EAAC;IAAA;IAAA,OAED,4BAAmB;MAAA;MACf,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAC,EAAE,EAAK;QACvC,IAAI,EAAE,CAAC,OAAO,KAAK,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE;UAChC,IAAI,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,EAAE;YACpC,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM;UACpC,CAAC,MAAM;YACH,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM;UACpC;QACJ;MACJ,CAAC,CAAC;IACN;EAAC;EAAA;AAAA;AAAA;;;;;AC9HL;AAKA;AACA;AACA;AAAiD;AAjBjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA,IAAM,KAAK,GAAG,SAAR,KAAK,CAAI,QAAQ,EAAK;EACxB,IAAI,QAAQ,CAAC,UAAU,KAAK,SAAS,EAAE;IACnC;AACR;AACA;IACQ,QAAQ,EAAE;EACd,CAAC,MAAM,IAAI,QAAQ,CAAC,gBAAgB,EAAE;IAClC;AACR;AACA;IACQ,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,CAAC;EAC3D,CAAC,MAAM;IACH;AACR;AACA;IACQ,QAAQ,CAAC,WAAW,CAAC,oBAAoB,EAAE,YAAY;MACnD,IAAI,QAAQ,CAAC,UAAU,KAAK,UAAU,EAAE;QACpC,QAAQ,EAAE;MACd;IACJ,CAAC,CAAC;EACN;AACJ,CAAC;;AAED;AACA;AACA;AACA,KAAK,CAAC,YAAM;EACR;AACJ;AACA;AACA;AACA;EACI,IAAI,OAAO,mBAAU,IAAI,UAAU,EAAE;IACjC,IAAM,IAAI,GAAG,IAAI,mBAAU,EAAE;IAC7B,IAAI,CAAC,IAAI,EAAE;EACf;EAEA,IAAM,GAAG,GAAG,QAAQ,CAAC,eAAe;EACpC,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,cAAc,YAAK,MAAM,CAAC,WAAW,QAAK;;EAEhE;AACJ;AACA;;EAEI;AACJ;AACA;AACA;EACI,IAAM,UAAU,GAAG,IAAI,6BAAoB,EAAE;EAC7C,UAAU,CAAC,IAAI,EAAE;;EAEjB;AACJ;AACA;AACA;EACI,IAAM,MAAM,GAAG,IAAI,eAAM,EAAE;EAC3B,MAAM,CAAC,IAAI,EAAE;;EAEb;AACJ;AACA;AACA;EACI,IAAM,YAAY,GAAG,IAAI,gBAAY,EAAE;EACvC,YAAY,CAAC,IAAI,EAAE;AACvB,CAAC,CAAC","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import gsap from \"gsap\";\nimport Swiper, { Navigation, Pagination } from \"swiper\";\n\nexport default class ThreeDSlider {\n    constructor() {\n        this.DOM = {\n            wrapper: \".js-3d-slider-wrapper\",\n            slider: \".js-3d-slider\",\n            next: \".js-3d-slider-next\",\n            prev: \".js-3d-slider-prev\",\n            pagination: \".js-3d-slider-pagination\",\n        };\n\n        this.wrapper = document.querySelector(this.DOM.wrapper);\n    }\n\n    init() {\n        if (!this.wrapper) return;\n\n        const slider = this.wrapper.querySelector(this.DOM.slider);\n        const next = this.wrapper.querySelector(this.DOM.next);\n        const prev = this.wrapper.querySelector(this.DOM.prev);\n        const pagination = this.wrapper.querySelector(this.DOM.pagination);\n\n        const swiper = new Swiper(slider, {\n            modules: [Navigation, Pagination],\n            loop: false,\n            pagination: {\n                el: pagination,\n            },\n            navigation: {\n                nextEl: next,\n                prevEl: prev,\n            },\n        });\n    }\n}\n","import gsap from \"gsap\";\nimport is from \"is_js\";\n\nexport default class Cursor {\n    constructor() {\n        this.DOM = {\n            wrapper: \".js-cursor\",\n        };\n\n        this.wrapper = document.querySelector(this.DOM.wrapper);\n        this.moved = false;\n    }\n\n    init() {\n        if (!this.wrapper || is.touchDevice()) return;\n\n        const offsetY = this.wrapper.offsetHeight * 0.5;\n        const offsetX = this.wrapper.offsetWidth * 0.05;\n\n        window.addEventListener(\"mousemove\", (ev) => {\n            if (!this.moved) {\n                this.moved = true;\n                this.wrapper.classList.add(\"is-moved\");\n            }\n\n            gsap.set(this.wrapper, {\n                x: ev.clientX - offsetX,\n                y: ev.clientY - offsetY,\n            });\n        });\n\n        document.querySelectorAll(\"a\").forEach((link) => {\n            this.singleLink(link);\n        });\n\n        document.querySelectorAll(\".has-hover\").forEach((link) => {\n            this.singleLink(link);\n        });\n    }\n\n    singleLink(link) {\n        link.addEventListener(\"mouseenter\", () => {\n            this.wrapper.classList.add(\"is-active\");\n        });\n\n        link.addEventListener(\"mouseleave\", () => {\n            this.wrapper.classList.remove(\"is-active\");\n        });\n    }\n}\n","/**\n * Navigation controller\n * \"smart\" navigation which goes off screen when scrolling down for a better overview of content and UX\n * navigation appears when scrolling up\n */\nexport default class NavigationController {\n    constructor() {\n        /**\n         * Navigation DOM selectors\n         * Navigation DOM state CSS classes\n         * @type {{navigation: string, states: {navigationSlideUp: string, navigationScrolled: string, navigationFixed: string}}}\n         */\n        this.DOM = {\n            navigation: \".js-navigation\",\n            states: {\n                navigationScrolled: \"has-scrolled\",\n                navigationFixed: \"is-fixed\",\n                navigationSlideUp: \"slide-up\",\n            },\n        };\n\n        /**\n         * flag, state variable for scrolling event\n         * @type {boolean}\n         */\n        this.scrolling = false;\n        /**\n         * amount of pixels to scroll from top for adding \"has-scrolled\" state class\n         * @type {number}\n         */\n        this.scrollNavigationOffset = 200;\n        /**\n         * variable for storing amount of scroll from top position value\n         * @type {number}\n         */\n        this.previousTop = 0;\n        /**\n         * variable for storing current scroll position value\n         * @type {number}\n         */\n        this.currentTop = 0;\n        this.scrollDelta = 0;\n        this.scrollOffset = 0;\n\n        /**\n         * fetch navigation element DOM element\n         * @type {Element}\n         */\n        this.navigation = document.querySelector(this.DOM.navigation);\n    }\n\n    //region methods\n\n    /**\n     *\n     */\n    init() {\n        if (this.navigation !== null) {\n            console.log(\"Navigation init()\");\n            this.navigationController();\n        } else {\n            console.error(`${this.DOM.navigation} does not exist in the DOM!`);\n        }\n    }\n\n    /**\n     *\n     */\n    navigationController() {\n        document.addEventListener(\"scroll\", () => {\n            if (!this.scrolling) {\n                this.scrolling = true;\n\n                if (!window.requestAnimationFrame) {\n                    setTimeout(this.checkScroll(), 250);\n                } else {\n                    requestAnimationFrame(() => this.checkScroll());\n                }\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    checkScroll() {\n        /**\n         *\n         * @type {number}\n         */\n        let currentTop = window.pageYOffset | document.body.scrollTop;\n\n        this.changeNavigationState(currentTop);\n\n        this.previousTop = currentTop;\n        this.scrolling = false;\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    changeNavigationState(currentTop) {\n        if (currentTop > this.scrollNavigationOffset) {\n            this.navigation.classList.add(this.DOM.states.navigationScrolled);\n        } else {\n            this.navigation.classList.remove(this.DOM.states.navigationScrolled);\n        }\n\n        if (this.previousTop >= currentTop) {\n            this.scrollingUp(currentTop);\n        } else {\n            this.scrollingDown(currentTop);\n        }\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    scrollingUp(currentTop) {\n        if (currentTop < this.scrollNavigationOffset) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        } else if (this.previousTop - currentTop > this.scrollDelta) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        }\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    scrollingDown(currentTop) {\n        if (currentTop > this.scrollNavigationOffset + this.scrollOffset) {\n            this.navigation.classList.add(this.DOM.states.navigationSlideUp);\n        } else if (currentTop > this.scrollNavigationOffset) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        }\n    }\n\n    //endregion\n}\n","/**\n * Grid helper\n * Show grid overlay when developing\n * Not included in production bundle JS file\n */\nexport default class GridHelper {\n    constructor() {\n        /**\n         * Grid DOM selector\n         * @type {{grid: string}}\n         */\n        this.DOM = {\n            grid: \"grid\",\n        };\n\n        /**\n         * Grid options\n         * @type {{\n         * gutterFixed: boolean,\n         * initialDisplay: string,\n         * gridFixed: boolean,\n         * gutterWidth: number,\n         * gridColor: string,\n         * columnCount: number,\n         * gridWidth: number,\n         * columnBgColor: string\n         * }}\n         */\n        this.gridOptions = {\n            initialDisplay: \"none\", // \"flex\" or \"none\" — initial display for the grid — string\n            columnCount: 24, // number of grid columns — integer\n            gridWidth: 1440, // base grid used in design; value in px — integer\n            gridFixed: true, // should grid width be restricted to gridWidth or it should go full width a nd behave fluidly across all screen sizes\n            gutterWidth: 0, // grid gutters value in px — integer\n            gutterFixed: false, // should grid gutter be a fixed value (px) or fluid — integer\n            gridColor: \"rgb(255, 0, 255, 0.15)\", // grid guides color — string of an rgba or hex value\n            columnBgColor: \"rgb(255, 0, 255, 0.025)\", // grid columns background color — string of an rgba or hex value\n        };\n\n        const consoleLogStyle = [\n            \"background-color: #a6a6a6\",\n            \"color: black\",\n            \"display: block\",\n            \"line-height: 24px\",\n            \"text-align: center\",\n            \"border: 1px solid #ffffff\",\n            \"font-weight: bold\",\n        ].join(\";\");\n\n        console.info(\"toggle grid: %c Alt/Option + G \", consoleLogStyle);\n\n        this.grid = null;\n\n        this.columnWidth =\n            (this.gridOptions.gridWidth - (this.gridOptions.columnCount - 1) * this.gridOptions.gutterWidth) / this.gridOptions.columnCount;\n\n        this.columnWidthPercentage = `${(this.columnWidth / this.gridOptions.gridWidth) * 100}%`;\n\n        this.gutterWidthPercentage = `${(this.gridOptions.gutterWidth / this.gridOptions.gridWidth) * 100}%`;\n    }\n\n    init() {\n        console.log(\"GridHelper init()\");\n        this.initGrid();\n        this.keyboardShortcut();\n    }\n\n    initGrid() {\n        // create grid overlay element\n        this.grid = document.createElement(\"div\");\n        this.grid.id = this.DOM.grid;\n\n        // style grid element\n        this.grid.style.cssText = `\n            pointer-events: none;\n            display: ${this.gridOptions.initialDisplay};\n            flex-direction: row;\n            width: 100%;\n            height: 100%;\n            position: fixed;\n            top: 0;\n            left: 50%;\n            transform: translateX(-50%);\n            z-index: 999;\n        `;\n\n        if (this.gridOptions.gridFixed === true) {\n            this.grid.style.maxWidth = `${this.gridOptions.gridWidth}px`;\n        }\n\n        if (!this.gridOptions.gutterWidth > 0) {\n            this.grid.style.borderLeft = \"none\";\n        }\n\n        // add grid container to page\n        document.body.appendChild(this.grid);\n\n        // add columns to grid\n        for (var i = 0; i < this.gridOptions.columnCount; i++) {\n            var column = document.createElement(\"i\");\n            this.grid.appendChild(column);\n\n            column.style.cssText = `\n                height: auto;\n                flex-grow: 1;\n                background-color: ${this.gridOptions.columnBgColor};\n                border-left: 1px solid ${this.gridOptions.gridColor};\n            `;\n\n            if (this.gridOptions.gutterWidth > 0) {\n                column.style.borderRight = `1px solid ${this.gridOptions.gridColor}`;\n            } else {\n                this.grid.style.borderRight = `1px solid ${this.gridOptions.gridColor}`;\n            }\n\n            if (this.gridOptions.gutterFixed === true) {\n                column.style.marginRight = `${this.gridOptions.gutterWidth}px`;\n            } else {\n                column.style.marginRight = this.gutterWidthPercentage;\n                column.style.width = this.columnWidthPercentage;\n            }\n        }\n\n        this.grid.lastChild.style.marginRight = 0;\n    }\n\n    keyboardShortcut() {\n        document.addEventListener(\"keyup\", (ev) => {\n            if (ev.keyCode === 71 && ev.altKey) {\n                if (this.grid.style.display === \"none\") {\n                    this.grid.style.display = \"flex\";\n                } else {\n                    this.grid.style.display = \"none\";\n                }\n            }\n        });\n    }\n}\n","/**\n * MAIN JS FILE\n */\n\n/**\n * Helpers\n * Imports of helper functions are stripped out of bundle\n * Include them within \"start-strip-code\" and \"end-strip-code\" comments\n */\n/* start-strip-code */\nimport GridHelper from \"./helpers/GridHelper\";\n/* end-strip-code */\n/**\n * Components\n */\nimport NavigationController from \"./components/NavigationController\";\nimport Cursor from \"./components/Cursor\";\nimport ThreeDSlider from \"./components/3dSlider\";\n\n/**\n * Check if document is ready cross-browser\n * @param callback\n */\nconst ready = (callback) => {\n    if (document.readyState !== \"loading\") {\n        /**\n         * Document is already ready, call the callback directly\n         */\n        callback();\n    } else if (document.addEventListener) {\n        /**\n         * All modern browsers to register DOMContentLoaded\n         */\n        document.addEventListener(\"DOMContentLoaded\", callback);\n    } else {\n        /**\n         * Old IE browsers\n         */\n        document.attachEvent(\"onreadystatechange\", function () {\n            if (document.readyState === \"complete\") {\n                callback();\n            }\n        });\n    }\n};\n\n/**\n * Document ready callback\n */\nready(() => {\n    /**\n     * HELPERS INIT\n     * Only init helpers if they exist\n     * Will be undefined on production because of import stripping\n     */\n    if (typeof GridHelper == \"function\") {\n        const grid = new GridHelper();\n        grid.init();\n    }\n\n    const doc = document.documentElement;\n    doc.style.setProperty(\"--win-height\", `${window.innerHeight}px`);\n\n    /**\n     * COMPONENTS INIT\n     */\n\n    /**\n     * Navigation\n     * @type {NavigationController}\n     */\n    const navigation = new NavigationController();\n    navigation.init();\n\n    /**\n     * Cursor\n     * @type {Cursor}\n     */\n    const cursor = new Cursor();\n    cursor.init();\n\n    /**\n     * ThreeDSlider\n     * @type {ThreeDSlider}\n     */\n    const threeDSlider = new ThreeDSlider();\n    threeDSlider.init();\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}